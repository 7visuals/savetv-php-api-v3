<?php
/**
 * ResponseRetentionTime
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API v3
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseRetentionTime Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseRetentionTime implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Response.RetentionTime';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'has_extended_retention_time_permission' => 'bool',
'days_div_x' => 'int',
'days_h264_mobile' => 'int',
'days_h264_sd' => 'int',
'days_h264_hd' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'has_extended_retention_time_permission' => null,
'days_div_x' => 'int32',
'days_h264_mobile' => 'int32',
'days_h264_sd' => 'int32',
'days_h264_hd' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'has_extended_retention_time_permission' => 'hasExtendedRetentionTimePermission',
'days_div_x' => 'daysDivX',
'days_h264_mobile' => 'daysH264Mobile',
'days_h264_sd' => 'daysH264SD',
'days_h264_hd' => 'daysH264HD'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'has_extended_retention_time_permission' => 'setHasExtendedRetentionTimePermission',
'days_div_x' => 'setDaysDivX',
'days_h264_mobile' => 'setDaysH264Mobile',
'days_h264_sd' => 'setDaysH264Sd',
'days_h264_hd' => 'setDaysH264Hd'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'has_extended_retention_time_permission' => 'getHasExtendedRetentionTimePermission',
'days_div_x' => 'getDaysDivX',
'days_h264_mobile' => 'getDaysH264Mobile',
'days_h264_sd' => 'getDaysH264Sd',
'days_h264_hd' => 'getDaysH264Hd'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['has_extended_retention_time_permission'] = isset($data['has_extended_retention_time_permission']) ? $data['has_extended_retention_time_permission'] : null;
        $this->container['days_div_x'] = isset($data['days_div_x']) ? $data['days_div_x'] : null;
        $this->container['days_h264_mobile'] = isset($data['days_h264_mobile']) ? $data['days_h264_mobile'] : null;
        $this->container['days_h264_sd'] = isset($data['days_h264_sd']) ? $data['days_h264_sd'] : null;
        $this->container['days_h264_hd'] = isset($data['days_h264_hd']) ? $data['days_h264_hd'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets has_extended_retention_time_permission
     *
     * @return bool
     */
    public function getHasExtendedRetentionTimePermission()
    {
        return $this->container['has_extended_retention_time_permission'];
    }

    /**
     * Sets has_extended_retention_time_permission
     *
     * @param bool $has_extended_retention_time_permission has_extended_retention_time_permission
     *
     * @return $this
     */
    public function setHasExtendedRetentionTimePermission($has_extended_retention_time_permission)
    {
        $this->container['has_extended_retention_time_permission'] = $has_extended_retention_time_permission;

        return $this;
    }

    /**
     * Gets days_div_x
     *
     * @return int
     */
    public function getDaysDivX()
    {
        return $this->container['days_div_x'];
    }

    /**
     * Sets days_div_x
     *
     * @param int $days_div_x days_div_x
     *
     * @return $this
     */
    public function setDaysDivX($days_div_x)
    {
        $this->container['days_div_x'] = $days_div_x;

        return $this;
    }

    /**
     * Gets days_h264_mobile
     *
     * @return int
     */
    public function getDaysH264Mobile()
    {
        return $this->container['days_h264_mobile'];
    }

    /**
     * Sets days_h264_mobile
     *
     * @param int $days_h264_mobile days_h264_mobile
     *
     * @return $this
     */
    public function setDaysH264Mobile($days_h264_mobile)
    {
        $this->container['days_h264_mobile'] = $days_h264_mobile;

        return $this;
    }

    /**
     * Gets days_h264_sd
     *
     * @return int
     */
    public function getDaysH264Sd()
    {
        return $this->container['days_h264_sd'];
    }

    /**
     * Sets days_h264_sd
     *
     * @param int $days_h264_sd days_h264_sd
     *
     * @return $this
     */
    public function setDaysH264Sd($days_h264_sd)
    {
        $this->container['days_h264_sd'] = $days_h264_sd;

        return $this;
    }

    /**
     * Gets days_h264_hd
     *
     * @return int
     */
    public function getDaysH264Hd()
    {
        return $this->container['days_h264_hd'];
    }

    /**
     * Sets days_h264_hd
     *
     * @param int $days_h264_hd days_h264_hd
     *
     * @return $this
     */
    public function setDaysH264Hd($days_h264_hd)
    {
        $this->container['days_h264_hd'] = $days_h264_hd;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
