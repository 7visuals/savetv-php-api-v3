<?php
/**
 * ResponseChannel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API v3
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseChannel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseChannel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Response.Channel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'channel_type' => 'int',
'count_telecasts' => 'int',
'image_url100' => 'string',
'image_url250' => 'string',
'image_url500' => 'string',
'channel_scope' => 'int',
'id' => 'int',
'name' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'channel_type' => 'int32',
'count_telecasts' => 'int32',
'image_url100' => null,
'image_url250' => null,
'image_url500' => null,
'channel_scope' => 'int32',
'id' => 'int32',
'name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel_type' => 'channelType',
'count_telecasts' => 'countTelecasts',
'image_url100' => 'imageUrl100',
'image_url250' => 'imageUrl250',
'image_url500' => 'imageUrl500',
'channel_scope' => 'channelScope',
'id' => 'id',
'name' => 'name'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel_type' => 'setChannelType',
'count_telecasts' => 'setCountTelecasts',
'image_url100' => 'setImageUrl100',
'image_url250' => 'setImageUrl250',
'image_url500' => 'setImageUrl500',
'channel_scope' => 'setChannelScope',
'id' => 'setId',
'name' => 'setName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel_type' => 'getChannelType',
'count_telecasts' => 'getCountTelecasts',
'image_url100' => 'getImageUrl100',
'image_url250' => 'getImageUrl250',
'image_url500' => 'getImageUrl500',
'channel_scope' => 'getChannelScope',
'id' => 'getId',
'name' => 'getName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel_type'] = isset($data['channel_type']) ? $data['channel_type'] : null;
        $this->container['count_telecasts'] = isset($data['count_telecasts']) ? $data['count_telecasts'] : null;
        $this->container['image_url100'] = isset($data['image_url100']) ? $data['image_url100'] : null;
        $this->container['image_url250'] = isset($data['image_url250']) ? $data['image_url250'] : null;
        $this->container['image_url500'] = isset($data['image_url500']) ? $data['image_url500'] : null;
        $this->container['channel_scope'] = isset($data['channel_scope']) ? $data['channel_scope'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel_type
     *
     * @return int
     */
    public function getChannelType()
    {
        return $this->container['channel_type'];
    }

    /**
     * Sets channel_type
     *
     * @param int $channel_type channel_type
     *
     * @return $this
     */
    public function setChannelType($channel_type)
    {
        $this->container['channel_type'] = $channel_type;

        return $this;
    }

    /**
     * Gets count_telecasts
     *
     * @return int
     */
    public function getCountTelecasts()
    {
        return $this->container['count_telecasts'];
    }

    /**
     * Sets count_telecasts
     *
     * @param int $count_telecasts count_telecasts
     *
     * @return $this
     */
    public function setCountTelecasts($count_telecasts)
    {
        $this->container['count_telecasts'] = $count_telecasts;

        return $this;
    }

    /**
     * Gets image_url100
     *
     * @return string
     */
    public function getImageUrl100()
    {
        return $this->container['image_url100'];
    }

    /**
     * Sets image_url100
     *
     * @param string $image_url100 image_url100
     *
     * @return $this
     */
    public function setImageUrl100($image_url100)
    {
        $this->container['image_url100'] = $image_url100;

        return $this;
    }

    /**
     * Gets image_url250
     *
     * @return string
     */
    public function getImageUrl250()
    {
        return $this->container['image_url250'];
    }

    /**
     * Sets image_url250
     *
     * @param string $image_url250 image_url250
     *
     * @return $this
     */
    public function setImageUrl250($image_url250)
    {
        $this->container['image_url250'] = $image_url250;

        return $this;
    }

    /**
     * Gets image_url500
     *
     * @return string
     */
    public function getImageUrl500()
    {
        return $this->container['image_url500'];
    }

    /**
     * Sets image_url500
     *
     * @param string $image_url500 image_url500
     *
     * @return $this
     */
    public function setImageUrl500($image_url500)
    {
        $this->container['image_url500'] = $image_url500;

        return $this;
    }

    /**
     * Gets channel_scope
     *
     * @return int
     */
    public function getChannelScope()
    {
        return $this->container['channel_scope'];
    }

    /**
     * Sets channel_scope
     *
     * @param int $channel_scope channel_scope
     *
     * @return $this
     */
    public function setChannelScope($channel_scope)
    {
        $this->container['channel_scope'] = $channel_scope;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
