<?php
/**
 * ResponseStar
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API v3
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseStar Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseStar implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Response.Star';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'nick_name' => 'string',
'description' => 'string',
'birthplace' => 'string',
'birthdate' => 'string',
'place_of_death' => 'string',
'date_of_death' => 'string',
'height' => 'string',
'is_highlight' => 'bool',
'awards' => '\Swagger\Client\Model\ResponseStarAward[]',
'links' => '\Swagger\Client\Model\ResponseStarLink[]',
'image_urls100' => 'string[]',
'image_urls250' => 'string[]',
'image_urls500' => 'string[]',
'alternative_name' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'name' => null,
'nick_name' => null,
'description' => null,
'birthplace' => null,
'birthdate' => null,
'place_of_death' => null,
'date_of_death' => null,
'height' => null,
'is_highlight' => null,
'awards' => null,
'links' => null,
'image_urls100' => null,
'image_urls250' => null,
'image_urls500' => null,
'alternative_name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'nick_name' => 'nickName',
'description' => 'description',
'birthplace' => 'birthplace',
'birthdate' => 'birthdate',
'place_of_death' => 'placeOfDeath',
'date_of_death' => 'dateOfDeath',
'height' => 'height',
'is_highlight' => 'isHighlight',
'awards' => 'awards',
'links' => 'links',
'image_urls100' => 'imageUrls100',
'image_urls250' => 'imageUrls250',
'image_urls500' => 'imageUrls500',
'alternative_name' => 'alternativeName'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'nick_name' => 'setNickName',
'description' => 'setDescription',
'birthplace' => 'setBirthplace',
'birthdate' => 'setBirthdate',
'place_of_death' => 'setPlaceOfDeath',
'date_of_death' => 'setDateOfDeath',
'height' => 'setHeight',
'is_highlight' => 'setIsHighlight',
'awards' => 'setAwards',
'links' => 'setLinks',
'image_urls100' => 'setImageUrls100',
'image_urls250' => 'setImageUrls250',
'image_urls500' => 'setImageUrls500',
'alternative_name' => 'setAlternativeName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'nick_name' => 'getNickName',
'description' => 'getDescription',
'birthplace' => 'getBirthplace',
'birthdate' => 'getBirthdate',
'place_of_death' => 'getPlaceOfDeath',
'date_of_death' => 'getDateOfDeath',
'height' => 'getHeight',
'is_highlight' => 'getIsHighlight',
'awards' => 'getAwards',
'links' => 'getLinks',
'image_urls100' => 'getImageUrls100',
'image_urls250' => 'getImageUrls250',
'image_urls500' => 'getImageUrls500',
'alternative_name' => 'getAlternativeName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['nick_name'] = isset($data['nick_name']) ? $data['nick_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['birthplace'] = isset($data['birthplace']) ? $data['birthplace'] : null;
        $this->container['birthdate'] = isset($data['birthdate']) ? $data['birthdate'] : null;
        $this->container['place_of_death'] = isset($data['place_of_death']) ? $data['place_of_death'] : null;
        $this->container['date_of_death'] = isset($data['date_of_death']) ? $data['date_of_death'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['is_highlight'] = isset($data['is_highlight']) ? $data['is_highlight'] : null;
        $this->container['awards'] = isset($data['awards']) ? $data['awards'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['image_urls100'] = isset($data['image_urls100']) ? $data['image_urls100'] : null;
        $this->container['image_urls250'] = isset($data['image_urls250']) ? $data['image_urls250'] : null;
        $this->container['image_urls500'] = isset($data['image_urls500']) ? $data['image_urls500'] : null;
        $this->container['alternative_name'] = isset($data['alternative_name']) ? $data['alternative_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets nick_name
     *
     * @return string
     */
    public function getNickName()
    {
        return $this->container['nick_name'];
    }

    /**
     * Sets nick_name
     *
     * @param string $nick_name nick_name
     *
     * @return $this
     */
    public function setNickName($nick_name)
    {
        $this->container['nick_name'] = $nick_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets birthplace
     *
     * @return string
     */
    public function getBirthplace()
    {
        return $this->container['birthplace'];
    }

    /**
     * Sets birthplace
     *
     * @param string $birthplace birthplace
     *
     * @return $this
     */
    public function setBirthplace($birthplace)
    {
        $this->container['birthplace'] = $birthplace;

        return $this;
    }

    /**
     * Gets birthdate
     *
     * @return string
     */
    public function getBirthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param string $birthdate birthdate
     *
     * @return $this
     */
    public function setBirthdate($birthdate)
    {
        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets place_of_death
     *
     * @return string
     */
    public function getPlaceOfDeath()
    {
        return $this->container['place_of_death'];
    }

    /**
     * Sets place_of_death
     *
     * @param string $place_of_death place_of_death
     *
     * @return $this
     */
    public function setPlaceOfDeath($place_of_death)
    {
        $this->container['place_of_death'] = $place_of_death;

        return $this;
    }

    /**
     * Gets date_of_death
     *
     * @return string
     */
    public function getDateOfDeath()
    {
        return $this->container['date_of_death'];
    }

    /**
     * Sets date_of_death
     *
     * @param string $date_of_death date_of_death
     *
     * @return $this
     */
    public function setDateOfDeath($date_of_death)
    {
        $this->container['date_of_death'] = $date_of_death;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets is_highlight
     *
     * @return bool
     */
    public function getIsHighlight()
    {
        return $this->container['is_highlight'];
    }

    /**
     * Sets is_highlight
     *
     * @param bool $is_highlight is_highlight
     *
     * @return $this
     */
    public function setIsHighlight($is_highlight)
    {
        $this->container['is_highlight'] = $is_highlight;

        return $this;
    }

    /**
     * Gets awards
     *
     * @return \Swagger\Client\Model\ResponseStarAward[]
     */
    public function getAwards()
    {
        return $this->container['awards'];
    }

    /**
     * Sets awards
     *
     * @param \Swagger\Client\Model\ResponseStarAward[] $awards awards
     *
     * @return $this
     */
    public function setAwards($awards)
    {
        $this->container['awards'] = $awards;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\ResponseStarLink[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\ResponseStarLink[] $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets image_urls100
     *
     * @return string[]
     */
    public function getImageUrls100()
    {
        return $this->container['image_urls100'];
    }

    /**
     * Sets image_urls100
     *
     * @param string[] $image_urls100 image_urls100
     *
     * @return $this
     */
    public function setImageUrls100($image_urls100)
    {
        $this->container['image_urls100'] = $image_urls100;

        return $this;
    }

    /**
     * Gets image_urls250
     *
     * @return string[]
     */
    public function getImageUrls250()
    {
        return $this->container['image_urls250'];
    }

    /**
     * Sets image_urls250
     *
     * @param string[] $image_urls250 image_urls250
     *
     * @return $this
     */
    public function setImageUrls250($image_urls250)
    {
        $this->container['image_urls250'] = $image_urls250;

        return $this;
    }

    /**
     * Gets image_urls500
     *
     * @return string[]
     */
    public function getImageUrls500()
    {
        return $this->container['image_urls500'];
    }

    /**
     * Sets image_urls500
     *
     * @param string[] $image_urls500 image_urls500
     *
     * @return $this
     */
    public function setImageUrls500($image_urls500)
    {
        $this->container['image_urls500'] = $image_urls500;

        return $this;
    }

    /**
     * Gets alternative_name
     *
     * @return string
     */
    public function getAlternativeName()
    {
        return $this->container['alternative_name'];
    }

    /**
     * Sets alternative_name
     *
     * @param string $alternative_name alternative_name
     *
     * @return $this
     */
    public function setAlternativeName($alternative_name)
    {
        $this->container['alternative_name'] = $alternative_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
