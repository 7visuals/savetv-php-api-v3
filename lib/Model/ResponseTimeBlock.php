<?php
/**
 * ResponseTimeBlock
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API v3
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseTimeBlock Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseTimeBlock implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Response.TimeBlock';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'display_start_time' => 'string',
'filter_start_time' => 'string',
'start_time_day_offset' => 'int',
'display_end_time' => 'string',
'filter_end_time' => 'string',
'end_time_day_offset' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'name' => null,
'display_start_time' => null,
'filter_start_time' => null,
'start_time_day_offset' => 'int32',
'display_end_time' => null,
'filter_end_time' => null,
'end_time_day_offset' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'display_start_time' => 'displayStartTime',
'filter_start_time' => 'filterStartTime',
'start_time_day_offset' => 'startTimeDayOffset',
'display_end_time' => 'displayEndTime',
'filter_end_time' => 'filterEndTime',
'end_time_day_offset' => 'endTimeDayOffset'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'display_start_time' => 'setDisplayStartTime',
'filter_start_time' => 'setFilterStartTime',
'start_time_day_offset' => 'setStartTimeDayOffset',
'display_end_time' => 'setDisplayEndTime',
'filter_end_time' => 'setFilterEndTime',
'end_time_day_offset' => 'setEndTimeDayOffset'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'display_start_time' => 'getDisplayStartTime',
'filter_start_time' => 'getFilterStartTime',
'start_time_day_offset' => 'getStartTimeDayOffset',
'display_end_time' => 'getDisplayEndTime',
'filter_end_time' => 'getFilterEndTime',
'end_time_day_offset' => 'getEndTimeDayOffset'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['display_start_time'] = isset($data['display_start_time']) ? $data['display_start_time'] : null;
        $this->container['filter_start_time'] = isset($data['filter_start_time']) ? $data['filter_start_time'] : null;
        $this->container['start_time_day_offset'] = isset($data['start_time_day_offset']) ? $data['start_time_day_offset'] : null;
        $this->container['display_end_time'] = isset($data['display_end_time']) ? $data['display_end_time'] : null;
        $this->container['filter_end_time'] = isset($data['filter_end_time']) ? $data['filter_end_time'] : null;
        $this->container['end_time_day_offset'] = isset($data['end_time_day_offset']) ? $data['end_time_day_offset'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets display_start_time
     *
     * @return string
     */
    public function getDisplayStartTime()
    {
        return $this->container['display_start_time'];
    }

    /**
     * Sets display_start_time
     *
     * @param string $display_start_time display_start_time
     *
     * @return $this
     */
    public function setDisplayStartTime($display_start_time)
    {
        $this->container['display_start_time'] = $display_start_time;

        return $this;
    }

    /**
     * Gets filter_start_time
     *
     * @return string
     */
    public function getFilterStartTime()
    {
        return $this->container['filter_start_time'];
    }

    /**
     * Sets filter_start_time
     *
     * @param string $filter_start_time filter_start_time
     *
     * @return $this
     */
    public function setFilterStartTime($filter_start_time)
    {
        $this->container['filter_start_time'] = $filter_start_time;

        return $this;
    }

    /**
     * Gets start_time_day_offset
     *
     * @return int
     */
    public function getStartTimeDayOffset()
    {
        return $this->container['start_time_day_offset'];
    }

    /**
     * Sets start_time_day_offset
     *
     * @param int $start_time_day_offset start_time_day_offset
     *
     * @return $this
     */
    public function setStartTimeDayOffset($start_time_day_offset)
    {
        $this->container['start_time_day_offset'] = $start_time_day_offset;

        return $this;
    }

    /**
     * Gets display_end_time
     *
     * @return string
     */
    public function getDisplayEndTime()
    {
        return $this->container['display_end_time'];
    }

    /**
     * Sets display_end_time
     *
     * @param string $display_end_time display_end_time
     *
     * @return $this
     */
    public function setDisplayEndTime($display_end_time)
    {
        $this->container['display_end_time'] = $display_end_time;

        return $this;
    }

    /**
     * Gets filter_end_time
     *
     * @return string
     */
    public function getFilterEndTime()
    {
        return $this->container['filter_end_time'];
    }

    /**
     * Sets filter_end_time
     *
     * @param string $filter_end_time filter_end_time
     *
     * @return $this
     */
    public function setFilterEndTime($filter_end_time)
    {
        $this->container['filter_end_time'] = $filter_end_time;

        return $this;
    }

    /**
     * Gets end_time_day_offset
     *
     * @return int
     */
    public function getEndTimeDayOffset()
    {
        return $this->container['end_time_day_offset'];
    }

    /**
     * Sets end_time_day_offset
     *
     * @param int $end_time_day_offset end_time_day_offset
     *
     * @return $this
     */
    public function setEndTimeDayOffset($end_time_day_offset)
    {
        $this->container['end_time_day_offset'] = $end_time_day_offset;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
