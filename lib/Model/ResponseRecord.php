<?php
/**
 * ResponseRecord
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API v3
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseRecord Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseRecord implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Response.Record';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'telecast_id' => 'int',
'start_date' => '\DateTime',
'end_date' => '\DateTime',
'create_date' => '\DateTime',
'update_date' => '\DateTime',
'is_ad_cut_enabled' => 'bool',
'ad_free_available' => 'bool',
'ad_free_length' => 'int',
'formats' => '\Swagger\Client\Model\ResponseRecordRequestedFormat[]',
'channels' => '\Swagger\Client\Model\ResponseChannelBase[]',
'telecast' => 'AllOfResponseRecordTelecast',
'defect' => 'AllOfResponseRecordDefect',
'tags' => '\Swagger\Client\Model\ResponseTag[]',
'playlists' => '\Swagger\Client\Model\ResponsePlaylistBase[]',
'resume_positions' => 'AllOfResponseRecordResumePositions'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'telecast_id' => 'int32',
'start_date' => 'date-time',
'end_date' => 'date-time',
'create_date' => 'date-time',
'update_date' => 'date-time',
'is_ad_cut_enabled' => null,
'ad_free_available' => null,
'ad_free_length' => 'int32',
'formats' => null,
'channels' => null,
'telecast' => null,
'defect' => null,
'tags' => null,
'playlists' => null,
'resume_positions' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'telecast_id' => 'telecastId',
'start_date' => 'startDate',
'end_date' => 'endDate',
'create_date' => 'createDate',
'update_date' => 'updateDate',
'is_ad_cut_enabled' => 'isAdCutEnabled',
'ad_free_available' => 'adFreeAvailable',
'ad_free_length' => 'adFreeLength',
'formats' => 'formats',
'channels' => 'channels',
'telecast' => 'telecast',
'defect' => 'defect',
'tags' => 'tags',
'playlists' => 'playlists',
'resume_positions' => 'resumePositions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'telecast_id' => 'setTelecastId',
'start_date' => 'setStartDate',
'end_date' => 'setEndDate',
'create_date' => 'setCreateDate',
'update_date' => 'setUpdateDate',
'is_ad_cut_enabled' => 'setIsAdCutEnabled',
'ad_free_available' => 'setAdFreeAvailable',
'ad_free_length' => 'setAdFreeLength',
'formats' => 'setFormats',
'channels' => 'setChannels',
'telecast' => 'setTelecast',
'defect' => 'setDefect',
'tags' => 'setTags',
'playlists' => 'setPlaylists',
'resume_positions' => 'setResumePositions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'telecast_id' => 'getTelecastId',
'start_date' => 'getStartDate',
'end_date' => 'getEndDate',
'create_date' => 'getCreateDate',
'update_date' => 'getUpdateDate',
'is_ad_cut_enabled' => 'getIsAdCutEnabled',
'ad_free_available' => 'getAdFreeAvailable',
'ad_free_length' => 'getAdFreeLength',
'formats' => 'getFormats',
'channels' => 'getChannels',
'telecast' => 'getTelecast',
'defect' => 'getDefect',
'tags' => 'getTags',
'playlists' => 'getPlaylists',
'resume_positions' => 'getResumePositions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['telecast_id'] = isset($data['telecast_id']) ? $data['telecast_id'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
        $this->container['is_ad_cut_enabled'] = isset($data['is_ad_cut_enabled']) ? $data['is_ad_cut_enabled'] : null;
        $this->container['ad_free_available'] = isset($data['ad_free_available']) ? $data['ad_free_available'] : null;
        $this->container['ad_free_length'] = isset($data['ad_free_length']) ? $data['ad_free_length'] : null;
        $this->container['formats'] = isset($data['formats']) ? $data['formats'] : null;
        $this->container['channels'] = isset($data['channels']) ? $data['channels'] : null;
        $this->container['telecast'] = isset($data['telecast']) ? $data['telecast'] : null;
        $this->container['defect'] = isset($data['defect']) ? $data['defect'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['playlists'] = isset($data['playlists']) ? $data['playlists'] : null;
        $this->container['resume_positions'] = isset($data['resume_positions']) ? $data['resume_positions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets telecast_id
     *
     * @return int
     */
    public function getTelecastId()
    {
        return $this->container['telecast_id'];
    }

    /**
     * Sets telecast_id
     *
     * @param int $telecast_id telecast_id
     *
     * @return $this
     */
    public function setTelecastId($telecast_id)
    {
        $this->container['telecast_id'] = $telecast_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets is_ad_cut_enabled
     *
     * @return bool
     */
    public function getIsAdCutEnabled()
    {
        return $this->container['is_ad_cut_enabled'];
    }

    /**
     * Sets is_ad_cut_enabled
     *
     * @param bool $is_ad_cut_enabled is_ad_cut_enabled
     *
     * @return $this
     */
    public function setIsAdCutEnabled($is_ad_cut_enabled)
    {
        $this->container['is_ad_cut_enabled'] = $is_ad_cut_enabled;

        return $this;
    }

    /**
     * Gets ad_free_available
     *
     * @return bool
     */
    public function getAdFreeAvailable()
    {
        return $this->container['ad_free_available'];
    }

    /**
     * Sets ad_free_available
     *
     * @param bool $ad_free_available ad_free_available
     *
     * @return $this
     */
    public function setAdFreeAvailable($ad_free_available)
    {
        $this->container['ad_free_available'] = $ad_free_available;

        return $this;
    }

    /**
     * Gets ad_free_length
     *
     * @return int
     */
    public function getAdFreeLength()
    {
        return $this->container['ad_free_length'];
    }

    /**
     * Sets ad_free_length
     *
     * @param int $ad_free_length ad_free_length
     *
     * @return $this
     */
    public function setAdFreeLength($ad_free_length)
    {
        $this->container['ad_free_length'] = $ad_free_length;

        return $this;
    }

    /**
     * Gets formats
     *
     * @return \Swagger\Client\Model\ResponseRecordRequestedFormat[]
     */
    public function getFormats()
    {
        return $this->container['formats'];
    }

    /**
     * Sets formats
     *
     * @param \Swagger\Client\Model\ResponseRecordRequestedFormat[] $formats formats
     *
     * @return $this
     */
    public function setFormats($formats)
    {
        $this->container['formats'] = $formats;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \Swagger\Client\Model\ResponseChannelBase[]
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \Swagger\Client\Model\ResponseChannelBase[] $channels channels
     *
     * @return $this
     */
    public function setChannels($channels)
    {
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets telecast
     *
     * @return AllOfResponseRecordTelecast
     */
    public function getTelecast()
    {
        return $this->container['telecast'];
    }

    /**
     * Sets telecast
     *
     * @param AllOfResponseRecordTelecast $telecast telecast
     *
     * @return $this
     */
    public function setTelecast($telecast)
    {
        $this->container['telecast'] = $telecast;

        return $this;
    }

    /**
     * Gets defect
     *
     * @return AllOfResponseRecordDefect
     */
    public function getDefect()
    {
        return $this->container['defect'];
    }

    /**
     * Sets defect
     *
     * @param AllOfResponseRecordDefect $defect defect
     *
     * @return $this
     */
    public function setDefect($defect)
    {
        $this->container['defect'] = $defect;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Swagger\Client\Model\ResponseTag[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Swagger\Client\Model\ResponseTag[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets playlists
     *
     * @return \Swagger\Client\Model\ResponsePlaylistBase[]
     */
    public function getPlaylists()
    {
        return $this->container['playlists'];
    }

    /**
     * Sets playlists
     *
     * @param \Swagger\Client\Model\ResponsePlaylistBase[] $playlists playlists
     *
     * @return $this
     */
    public function setPlaylists($playlists)
    {
        $this->container['playlists'] = $playlists;

        return $this;
    }

    /**
     * Gets resume_positions
     *
     * @return AllOfResponseRecordResumePositions
     */
    public function getResumePositions()
    {
        return $this->container['resume_positions'];
    }

    /**
     * Sets resume_positions
     *
     * @param AllOfResponseRecordResumePositions $resume_positions resume_positions
     *
     * @return $this
     */
    public function setResumePositions($resume_positions)
    {
        $this->container['resume_positions'] = $resume_positions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
