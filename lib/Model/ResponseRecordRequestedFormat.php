<?php
/**
 * ResponseRecordRequestedFormat
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API v3
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseRecordRequestedFormat Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseRecordRequestedFormat implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Response.RecordRequestedFormat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'record_state' => 'AllOfResponseRecordRequestedFormatRecordState',
'record_format' => 'AllOfResponseRecordRequestedFormatRecordFormat',
'uncut_video_size' => 'int',
'cut_video_size' => 'int',
'record_state_message' => 'string',
'retention_date' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'record_state' => null,
'record_format' => null,
'uncut_video_size' => 'int32',
'cut_video_size' => 'int32',
'record_state_message' => null,
'retention_date' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'record_state' => 'recordState',
'record_format' => 'recordFormat',
'uncut_video_size' => 'uncutVideoSize',
'cut_video_size' => 'cutVideoSize',
'record_state_message' => 'recordStateMessage',
'retention_date' => 'retentionDate'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'record_state' => 'setRecordState',
'record_format' => 'setRecordFormat',
'uncut_video_size' => 'setUncutVideoSize',
'cut_video_size' => 'setCutVideoSize',
'record_state_message' => 'setRecordStateMessage',
'retention_date' => 'setRetentionDate'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'record_state' => 'getRecordState',
'record_format' => 'getRecordFormat',
'uncut_video_size' => 'getUncutVideoSize',
'cut_video_size' => 'getCutVideoSize',
'record_state_message' => 'getRecordStateMessage',
'retention_date' => 'getRetentionDate'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['record_state'] = isset($data['record_state']) ? $data['record_state'] : null;
        $this->container['record_format'] = isset($data['record_format']) ? $data['record_format'] : null;
        $this->container['uncut_video_size'] = isset($data['uncut_video_size']) ? $data['uncut_video_size'] : null;
        $this->container['cut_video_size'] = isset($data['cut_video_size']) ? $data['cut_video_size'] : null;
        $this->container['record_state_message'] = isset($data['record_state_message']) ? $data['record_state_message'] : null;
        $this->container['retention_date'] = isset($data['retention_date']) ? $data['retention_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets record_state
     *
     * @return AllOfResponseRecordRequestedFormatRecordState
     */
    public function getRecordState()
    {
        return $this->container['record_state'];
    }

    /**
     * Sets record_state
     *
     * @param AllOfResponseRecordRequestedFormatRecordState $record_state record_state
     *
     * @return $this
     */
    public function setRecordState($record_state)
    {
        $this->container['record_state'] = $record_state;

        return $this;
    }

    /**
     * Gets record_format
     *
     * @return AllOfResponseRecordRequestedFormatRecordFormat
     */
    public function getRecordFormat()
    {
        return $this->container['record_format'];
    }

    /**
     * Sets record_format
     *
     * @param AllOfResponseRecordRequestedFormatRecordFormat $record_format record_format
     *
     * @return $this
     */
    public function setRecordFormat($record_format)
    {
        $this->container['record_format'] = $record_format;

        return $this;
    }

    /**
     * Gets uncut_video_size
     *
     * @return int
     */
    public function getUncutVideoSize()
    {
        return $this->container['uncut_video_size'];
    }

    /**
     * Sets uncut_video_size
     *
     * @param int $uncut_video_size uncut_video_size
     *
     * @return $this
     */
    public function setUncutVideoSize($uncut_video_size)
    {
        $this->container['uncut_video_size'] = $uncut_video_size;

        return $this;
    }

    /**
     * Gets cut_video_size
     *
     * @return int
     */
    public function getCutVideoSize()
    {
        return $this->container['cut_video_size'];
    }

    /**
     * Sets cut_video_size
     *
     * @param int $cut_video_size cut_video_size
     *
     * @return $this
     */
    public function setCutVideoSize($cut_video_size)
    {
        $this->container['cut_video_size'] = $cut_video_size;

        return $this;
    }

    /**
     * Gets record_state_message
     *
     * @return string
     */
    public function getRecordStateMessage()
    {
        return $this->container['record_state_message'];
    }

    /**
     * Sets record_state_message
     *
     * @param string $record_state_message record_state_message
     *
     * @return $this
     */
    public function setRecordStateMessage($record_state_message)
    {
        $this->container['record_state_message'] = $record_state_message;

        return $this;
    }

    /**
     * Gets retention_date
     *
     * @return \DateTime
     */
    public function getRetentionDate()
    {
        return $this->container['retention_date'];
    }

    /**
     * Sets retention_date
     *
     * @param \DateTime $retention_date retention_date
     *
     * @return $this
     */
    public function setRetentionDate($retention_date)
    {
        $this->container['retention_date'] = $retention_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
