<?php
/**
 * ResponseDownload
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API v3
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseDownload Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseDownload implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Response.Download';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'download_url' => 'string',
'streaming_url' => 'string',
'html_video_player_url' => 'string',
'file_name' => 'string',
'estimated_file_size' => 'int',
'resume_position' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'download_url' => null,
'streaming_url' => null,
'html_video_player_url' => null,
'file_name' => null,
'estimated_file_size' => 'int64',
'resume_position' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'download_url' => 'downloadUrl',
'streaming_url' => 'streamingUrl',
'html_video_player_url' => 'htmlVideoPlayerUrl',
'file_name' => 'fileName',
'estimated_file_size' => 'estimatedFileSize',
'resume_position' => 'resumePosition'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'download_url' => 'setDownloadUrl',
'streaming_url' => 'setStreamingUrl',
'html_video_player_url' => 'setHtmlVideoPlayerUrl',
'file_name' => 'setFileName',
'estimated_file_size' => 'setEstimatedFileSize',
'resume_position' => 'setResumePosition'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'download_url' => 'getDownloadUrl',
'streaming_url' => 'getStreamingUrl',
'html_video_player_url' => 'getHtmlVideoPlayerUrl',
'file_name' => 'getFileName',
'estimated_file_size' => 'getEstimatedFileSize',
'resume_position' => 'getResumePosition'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['download_url'] = isset($data['download_url']) ? $data['download_url'] : null;
        $this->container['streaming_url'] = isset($data['streaming_url']) ? $data['streaming_url'] : null;
        $this->container['html_video_player_url'] = isset($data['html_video_player_url']) ? $data['html_video_player_url'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['estimated_file_size'] = isset($data['estimated_file_size']) ? $data['estimated_file_size'] : null;
        $this->container['resume_position'] = isset($data['resume_position']) ? $data['resume_position'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets download_url
     *
     * @return string
     */
    public function getDownloadUrl()
    {
        return $this->container['download_url'];
    }

    /**
     * Sets download_url
     *
     * @param string $download_url download_url
     *
     * @return $this
     */
    public function setDownloadUrl($download_url)
    {
        $this->container['download_url'] = $download_url;

        return $this;
    }

    /**
     * Gets streaming_url
     *
     * @return string
     */
    public function getStreamingUrl()
    {
        return $this->container['streaming_url'];
    }

    /**
     * Sets streaming_url
     *
     * @param string $streaming_url streaming_url
     *
     * @return $this
     */
    public function setStreamingUrl($streaming_url)
    {
        $this->container['streaming_url'] = $streaming_url;

        return $this;
    }

    /**
     * Gets html_video_player_url
     *
     * @return string
     */
    public function getHtmlVideoPlayerUrl()
    {
        return $this->container['html_video_player_url'];
    }

    /**
     * Sets html_video_player_url
     *
     * @param string $html_video_player_url html_video_player_url
     *
     * @return $this
     */
    public function setHtmlVideoPlayerUrl($html_video_player_url)
    {
        $this->container['html_video_player_url'] = $html_video_player_url;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string $file_name file_name
     *
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets estimated_file_size
     *
     * @return int
     */
    public function getEstimatedFileSize()
    {
        return $this->container['estimated_file_size'];
    }

    /**
     * Sets estimated_file_size
     *
     * @param int $estimated_file_size estimated_file_size
     *
     * @return $this
     */
    public function setEstimatedFileSize($estimated_file_size)
    {
        $this->container['estimated_file_size'] = $estimated_file_size;

        return $this;
    }

    /**
     * Gets resume_position
     *
     * @return int
     */
    public function getResumePosition()
    {
        return $this->container['resume_position'];
    }

    /**
     * Sets resume_position
     *
     * @param int $resume_position resume_position
     *
     * @return $this
     */
    public function setResumePosition($resume_position)
    {
        $this->container['resume_position'] = $resume_position;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
