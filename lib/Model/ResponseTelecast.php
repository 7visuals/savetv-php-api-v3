<?php
/**
 * ResponseTelecast
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API v3
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseTelecast Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseTelecast implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Response.Telecast';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'title' => 'string',
'sub_title' => 'string',
'original_title' => 'string',
'episode' => 'string',
'subject' => 'string',
'description' => 'string',
'start_date' => '\DateTime',
'end_date' => '\DateTime',
'voluntary_self_regulation_of_the_movie_industry' => 'string',
'is_black_white' => 'bool',
'commentator' => 'string',
'director' => 'string',
'interpret' => 'string',
'moderator' => 'string',
'guests' => 'string',
'tv_category' => 'AllOfResponseTelecastTvCategory',
'tv_sub_category' => 'AllOfResponseTelecastTvSubCategory',
'tv_station' => 'AllOfResponseTelecastTvStation',
'image_url100' => 'string',
'image_url250' => 'string',
'image_url500' => 'string',
'roles' => '\Swagger\Client\Model\ResponseRole[]',
'exists_record' => 'bool',
'is_highlight' => 'bool',
'is_omitted' => 'bool',
'update_date' => '\DateTime',
'create_date' => '\DateTime',
'rating' => 'AllOfResponseTelecastRating',
'country' => 'string',
'year' => 'int',
'characterization' => 'string',
'has_moved' => 'bool',
'slug' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'title' => null,
'sub_title' => null,
'original_title' => null,
'episode' => null,
'subject' => null,
'description' => null,
'start_date' => 'date-time',
'end_date' => 'date-time',
'voluntary_self_regulation_of_the_movie_industry' => null,
'is_black_white' => null,
'commentator' => null,
'director' => null,
'interpret' => null,
'moderator' => null,
'guests' => null,
'tv_category' => null,
'tv_sub_category' => null,
'tv_station' => null,
'image_url100' => null,
'image_url250' => null,
'image_url500' => null,
'roles' => null,
'exists_record' => null,
'is_highlight' => null,
'is_omitted' => null,
'update_date' => 'date-time',
'create_date' => 'date-time',
'rating' => null,
'country' => null,
'year' => 'int32',
'characterization' => null,
'has_moved' => null,
'slug' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'title' => 'title',
'sub_title' => 'subTitle',
'original_title' => 'originalTitle',
'episode' => 'episode',
'subject' => 'subject',
'description' => 'description',
'start_date' => 'startDate',
'end_date' => 'endDate',
'voluntary_self_regulation_of_the_movie_industry' => 'voluntarySelfRegulationOfTheMovieIndustry',
'is_black_white' => 'isBlackWhite',
'commentator' => 'commentator',
'director' => 'director',
'interpret' => 'interpret',
'moderator' => 'moderator',
'guests' => 'guests',
'tv_category' => 'tvCategory',
'tv_sub_category' => 'tvSubCategory',
'tv_station' => 'tvStation',
'image_url100' => 'imageUrl100',
'image_url250' => 'imageUrl250',
'image_url500' => 'imageUrl500',
'roles' => 'roles',
'exists_record' => 'existsRecord',
'is_highlight' => 'isHighlight',
'is_omitted' => 'isOmitted',
'update_date' => 'updateDate',
'create_date' => 'createDate',
'rating' => 'rating',
'country' => 'country',
'year' => 'year',
'characterization' => 'characterization',
'has_moved' => 'hasMoved',
'slug' => 'slug'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'title' => 'setTitle',
'sub_title' => 'setSubTitle',
'original_title' => 'setOriginalTitle',
'episode' => 'setEpisode',
'subject' => 'setSubject',
'description' => 'setDescription',
'start_date' => 'setStartDate',
'end_date' => 'setEndDate',
'voluntary_self_regulation_of_the_movie_industry' => 'setVoluntarySelfRegulationOfTheMovieIndustry',
'is_black_white' => 'setIsBlackWhite',
'commentator' => 'setCommentator',
'director' => 'setDirector',
'interpret' => 'setInterpret',
'moderator' => 'setModerator',
'guests' => 'setGuests',
'tv_category' => 'setTvCategory',
'tv_sub_category' => 'setTvSubCategory',
'tv_station' => 'setTvStation',
'image_url100' => 'setImageUrl100',
'image_url250' => 'setImageUrl250',
'image_url500' => 'setImageUrl500',
'roles' => 'setRoles',
'exists_record' => 'setExistsRecord',
'is_highlight' => 'setIsHighlight',
'is_omitted' => 'setIsOmitted',
'update_date' => 'setUpdateDate',
'create_date' => 'setCreateDate',
'rating' => 'setRating',
'country' => 'setCountry',
'year' => 'setYear',
'characterization' => 'setCharacterization',
'has_moved' => 'setHasMoved',
'slug' => 'setSlug'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'title' => 'getTitle',
'sub_title' => 'getSubTitle',
'original_title' => 'getOriginalTitle',
'episode' => 'getEpisode',
'subject' => 'getSubject',
'description' => 'getDescription',
'start_date' => 'getStartDate',
'end_date' => 'getEndDate',
'voluntary_self_regulation_of_the_movie_industry' => 'getVoluntarySelfRegulationOfTheMovieIndustry',
'is_black_white' => 'getIsBlackWhite',
'commentator' => 'getCommentator',
'director' => 'getDirector',
'interpret' => 'getInterpret',
'moderator' => 'getModerator',
'guests' => 'getGuests',
'tv_category' => 'getTvCategory',
'tv_sub_category' => 'getTvSubCategory',
'tv_station' => 'getTvStation',
'image_url100' => 'getImageUrl100',
'image_url250' => 'getImageUrl250',
'image_url500' => 'getImageUrl500',
'roles' => 'getRoles',
'exists_record' => 'getExistsRecord',
'is_highlight' => 'getIsHighlight',
'is_omitted' => 'getIsOmitted',
'update_date' => 'getUpdateDate',
'create_date' => 'getCreateDate',
'rating' => 'getRating',
'country' => 'getCountry',
'year' => 'getYear',
'characterization' => 'getCharacterization',
'has_moved' => 'getHasMoved',
'slug' => 'getSlug'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['sub_title'] = isset($data['sub_title']) ? $data['sub_title'] : null;
        $this->container['original_title'] = isset($data['original_title']) ? $data['original_title'] : null;
        $this->container['episode'] = isset($data['episode']) ? $data['episode'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['voluntary_self_regulation_of_the_movie_industry'] = isset($data['voluntary_self_regulation_of_the_movie_industry']) ? $data['voluntary_self_regulation_of_the_movie_industry'] : null;
        $this->container['is_black_white'] = isset($data['is_black_white']) ? $data['is_black_white'] : null;
        $this->container['commentator'] = isset($data['commentator']) ? $data['commentator'] : null;
        $this->container['director'] = isset($data['director']) ? $data['director'] : null;
        $this->container['interpret'] = isset($data['interpret']) ? $data['interpret'] : null;
        $this->container['moderator'] = isset($data['moderator']) ? $data['moderator'] : null;
        $this->container['guests'] = isset($data['guests']) ? $data['guests'] : null;
        $this->container['tv_category'] = isset($data['tv_category']) ? $data['tv_category'] : null;
        $this->container['tv_sub_category'] = isset($data['tv_sub_category']) ? $data['tv_sub_category'] : null;
        $this->container['tv_station'] = isset($data['tv_station']) ? $data['tv_station'] : null;
        $this->container['image_url100'] = isset($data['image_url100']) ? $data['image_url100'] : null;
        $this->container['image_url250'] = isset($data['image_url250']) ? $data['image_url250'] : null;
        $this->container['image_url500'] = isset($data['image_url500']) ? $data['image_url500'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['exists_record'] = isset($data['exists_record']) ? $data['exists_record'] : null;
        $this->container['is_highlight'] = isset($data['is_highlight']) ? $data['is_highlight'] : null;
        $this->container['is_omitted'] = isset($data['is_omitted']) ? $data['is_omitted'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
        $this->container['characterization'] = isset($data['characterization']) ? $data['characterization'] : null;
        $this->container['has_moved'] = isset($data['has_moved']) ? $data['has_moved'] : null;
        $this->container['slug'] = isset($data['slug']) ? $data['slug'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets sub_title
     *
     * @return string
     */
    public function getSubTitle()
    {
        return $this->container['sub_title'];
    }

    /**
     * Sets sub_title
     *
     * @param string $sub_title sub_title
     *
     * @return $this
     */
    public function setSubTitle($sub_title)
    {
        $this->container['sub_title'] = $sub_title;

        return $this;
    }

    /**
     * Gets original_title
     *
     * @return string
     */
    public function getOriginalTitle()
    {
        return $this->container['original_title'];
    }

    /**
     * Sets original_title
     *
     * @param string $original_title original_title
     *
     * @return $this
     */
    public function setOriginalTitle($original_title)
    {
        $this->container['original_title'] = $original_title;

        return $this;
    }

    /**
     * Gets episode
     *
     * @return string
     */
    public function getEpisode()
    {
        return $this->container['episode'];
    }

    /**
     * Sets episode
     *
     * @param string $episode episode
     *
     * @return $this
     */
    public function setEpisode($episode)
    {
        $this->container['episode'] = $episode;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets voluntary_self_regulation_of_the_movie_industry
     *
     * @return string
     */
    public function getVoluntarySelfRegulationOfTheMovieIndustry()
    {
        return $this->container['voluntary_self_regulation_of_the_movie_industry'];
    }

    /**
     * Sets voluntary_self_regulation_of_the_movie_industry
     *
     * @param string $voluntary_self_regulation_of_the_movie_industry voluntary_self_regulation_of_the_movie_industry
     *
     * @return $this
     */
    public function setVoluntarySelfRegulationOfTheMovieIndustry($voluntary_self_regulation_of_the_movie_industry)
    {
        $this->container['voluntary_self_regulation_of_the_movie_industry'] = $voluntary_self_regulation_of_the_movie_industry;

        return $this;
    }

    /**
     * Gets is_black_white
     *
     * @return bool
     */
    public function getIsBlackWhite()
    {
        return $this->container['is_black_white'];
    }

    /**
     * Sets is_black_white
     *
     * @param bool $is_black_white is_black_white
     *
     * @return $this
     */
    public function setIsBlackWhite($is_black_white)
    {
        $this->container['is_black_white'] = $is_black_white;

        return $this;
    }

    /**
     * Gets commentator
     *
     * @return string
     */
    public function getCommentator()
    {
        return $this->container['commentator'];
    }

    /**
     * Sets commentator
     *
     * @param string $commentator commentator
     *
     * @return $this
     */
    public function setCommentator($commentator)
    {
        $this->container['commentator'] = $commentator;

        return $this;
    }

    /**
     * Gets director
     *
     * @return string
     */
    public function getDirector()
    {
        return $this->container['director'];
    }

    /**
     * Sets director
     *
     * @param string $director director
     *
     * @return $this
     */
    public function setDirector($director)
    {
        $this->container['director'] = $director;

        return $this;
    }

    /**
     * Gets interpret
     *
     * @return string
     */
    public function getInterpret()
    {
        return $this->container['interpret'];
    }

    /**
     * Sets interpret
     *
     * @param string $interpret interpret
     *
     * @return $this
     */
    public function setInterpret($interpret)
    {
        $this->container['interpret'] = $interpret;

        return $this;
    }

    /**
     * Gets moderator
     *
     * @return string
     */
    public function getModerator()
    {
        return $this->container['moderator'];
    }

    /**
     * Sets moderator
     *
     * @param string $moderator moderator
     *
     * @return $this
     */
    public function setModerator($moderator)
    {
        $this->container['moderator'] = $moderator;

        return $this;
    }

    /**
     * Gets guests
     *
     * @return string
     */
    public function getGuests()
    {
        return $this->container['guests'];
    }

    /**
     * Sets guests
     *
     * @param string $guests guests
     *
     * @return $this
     */
    public function setGuests($guests)
    {
        $this->container['guests'] = $guests;

        return $this;
    }

    /**
     * Gets tv_category
     *
     * @return AllOfResponseTelecastTvCategory
     */
    public function getTvCategory()
    {
        return $this->container['tv_category'];
    }

    /**
     * Sets tv_category
     *
     * @param AllOfResponseTelecastTvCategory $tv_category tv_category
     *
     * @return $this
     */
    public function setTvCategory($tv_category)
    {
        $this->container['tv_category'] = $tv_category;

        return $this;
    }

    /**
     * Gets tv_sub_category
     *
     * @return AllOfResponseTelecastTvSubCategory
     */
    public function getTvSubCategory()
    {
        return $this->container['tv_sub_category'];
    }

    /**
     * Sets tv_sub_category
     *
     * @param AllOfResponseTelecastTvSubCategory $tv_sub_category tv_sub_category
     *
     * @return $this
     */
    public function setTvSubCategory($tv_sub_category)
    {
        $this->container['tv_sub_category'] = $tv_sub_category;

        return $this;
    }

    /**
     * Gets tv_station
     *
     * @return AllOfResponseTelecastTvStation
     */
    public function getTvStation()
    {
        return $this->container['tv_station'];
    }

    /**
     * Sets tv_station
     *
     * @param AllOfResponseTelecastTvStation $tv_station tv_station
     *
     * @return $this
     */
    public function setTvStation($tv_station)
    {
        $this->container['tv_station'] = $tv_station;

        return $this;
    }

    /**
     * Gets image_url100
     *
     * @return string
     */
    public function getImageUrl100()
    {
        return $this->container['image_url100'];
    }

    /**
     * Sets image_url100
     *
     * @param string $image_url100 image_url100
     *
     * @return $this
     */
    public function setImageUrl100($image_url100)
    {
        $this->container['image_url100'] = $image_url100;

        return $this;
    }

    /**
     * Gets image_url250
     *
     * @return string
     */
    public function getImageUrl250()
    {
        return $this->container['image_url250'];
    }

    /**
     * Sets image_url250
     *
     * @param string $image_url250 image_url250
     *
     * @return $this
     */
    public function setImageUrl250($image_url250)
    {
        $this->container['image_url250'] = $image_url250;

        return $this;
    }

    /**
     * Gets image_url500
     *
     * @return string
     */
    public function getImageUrl500()
    {
        return $this->container['image_url500'];
    }

    /**
     * Sets image_url500
     *
     * @param string $image_url500 image_url500
     *
     * @return $this
     */
    public function setImageUrl500($image_url500)
    {
        $this->container['image_url500'] = $image_url500;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \Swagger\Client\Model\ResponseRole[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \Swagger\Client\Model\ResponseRole[] $roles roles
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets exists_record
     *
     * @return bool
     */
    public function getExistsRecord()
    {
        return $this->container['exists_record'];
    }

    /**
     * Sets exists_record
     *
     * @param bool $exists_record exists_record
     *
     * @return $this
     */
    public function setExistsRecord($exists_record)
    {
        $this->container['exists_record'] = $exists_record;

        return $this;
    }

    /**
     * Gets is_highlight
     *
     * @return bool
     */
    public function getIsHighlight()
    {
        return $this->container['is_highlight'];
    }

    /**
     * Sets is_highlight
     *
     * @param bool $is_highlight is_highlight
     *
     * @return $this
     */
    public function setIsHighlight($is_highlight)
    {
        $this->container['is_highlight'] = $is_highlight;

        return $this;
    }

    /**
     * Gets is_omitted
     *
     * @return bool
     */
    public function getIsOmitted()
    {
        return $this->container['is_omitted'];
    }

    /**
     * Sets is_omitted
     *
     * @param bool $is_omitted is_omitted
     *
     * @return $this
     */
    public function setIsOmitted($is_omitted)
    {
        $this->container['is_omitted'] = $is_omitted;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return AllOfResponseTelecastRating
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param AllOfResponseTelecastRating $rating rating
     *
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int $year year
     *
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets characterization
     *
     * @return string
     */
    public function getCharacterization()
    {
        return $this->container['characterization'];
    }

    /**
     * Sets characterization
     *
     * @param string $characterization characterization
     *
     * @return $this
     */
    public function setCharacterization($characterization)
    {
        $this->container['characterization'] = $characterization;

        return $this;
    }

    /**
     * Gets has_moved
     *
     * @return bool
     */
    public function getHasMoved()
    {
        return $this->container['has_moved'];
    }

    /**
     * Sets has_moved
     *
     * @param bool $has_moved has_moved
     *
     * @return $this
     */
    public function setHasMoved($has_moved)
    {
        $this->container['has_moved'] = $has_moved;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug slug
     *
     * @return $this
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
