<?php
/**
 * ResponseUser
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API v3
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseUser Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseUser implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Response.User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'full_name' => 'string',
'contract' => 'AllOfResponseUserContract',
'record_buffer' => 'AllOfResponseUserRecordBuffer',
'record_format' => 'AllOfResponseUserRecordFormat',
'guard' => 'AllOfResponseUserGuard',
'catch_all' => 'AllOfResponseUserCatchAll',
'retention_time' => 'AllOfResponseUserRetentionTime',
'playlist_account_state' => 'AllOfResponseUserPlaylistAccountState',
'live_streaming' => 'AllOfResponseUserLiveStreaming',
'erotic' => 'AllOfResponseUserErotic'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'full_name' => null,
'contract' => null,
'record_buffer' => null,
'record_format' => null,
'guard' => null,
'catch_all' => null,
'retention_time' => null,
'playlist_account_state' => null,
'live_streaming' => null,
'erotic' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'full_name' => 'fullName',
'contract' => 'contract',
'record_buffer' => 'recordBuffer',
'record_format' => 'recordFormat',
'guard' => 'guard',
'catch_all' => 'catchAll',
'retention_time' => 'retentionTime',
'playlist_account_state' => 'playlistAccountState',
'live_streaming' => 'liveStreaming',
'erotic' => 'erotic'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'full_name' => 'setFullName',
'contract' => 'setContract',
'record_buffer' => 'setRecordBuffer',
'record_format' => 'setRecordFormat',
'guard' => 'setGuard',
'catch_all' => 'setCatchAll',
'retention_time' => 'setRetentionTime',
'playlist_account_state' => 'setPlaylistAccountState',
'live_streaming' => 'setLiveStreaming',
'erotic' => 'setErotic'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'full_name' => 'getFullName',
'contract' => 'getContract',
'record_buffer' => 'getRecordBuffer',
'record_format' => 'getRecordFormat',
'guard' => 'getGuard',
'catch_all' => 'getCatchAll',
'retention_time' => 'getRetentionTime',
'playlist_account_state' => 'getPlaylistAccountState',
'live_streaming' => 'getLiveStreaming',
'erotic' => 'getErotic'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['contract'] = isset($data['contract']) ? $data['contract'] : null;
        $this->container['record_buffer'] = isset($data['record_buffer']) ? $data['record_buffer'] : null;
        $this->container['record_format'] = isset($data['record_format']) ? $data['record_format'] : null;
        $this->container['guard'] = isset($data['guard']) ? $data['guard'] : null;
        $this->container['catch_all'] = isset($data['catch_all']) ? $data['catch_all'] : null;
        $this->container['retention_time'] = isset($data['retention_time']) ? $data['retention_time'] : null;
        $this->container['playlist_account_state'] = isset($data['playlist_account_state']) ? $data['playlist_account_state'] : null;
        $this->container['live_streaming'] = isset($data['live_streaming']) ? $data['live_streaming'] : null;
        $this->container['erotic'] = isset($data['erotic']) ? $data['erotic'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name full_name
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets contract
     *
     * @return AllOfResponseUserContract
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     *
     * @param AllOfResponseUserContract $contract contract
     *
     * @return $this
     */
    public function setContract($contract)
    {
        $this->container['contract'] = $contract;

        return $this;
    }

    /**
     * Gets record_buffer
     *
     * @return AllOfResponseUserRecordBuffer
     */
    public function getRecordBuffer()
    {
        return $this->container['record_buffer'];
    }

    /**
     * Sets record_buffer
     *
     * @param AllOfResponseUserRecordBuffer $record_buffer record_buffer
     *
     * @return $this
     */
    public function setRecordBuffer($record_buffer)
    {
        $this->container['record_buffer'] = $record_buffer;

        return $this;
    }

    /**
     * Gets record_format
     *
     * @return AllOfResponseUserRecordFormat
     */
    public function getRecordFormat()
    {
        return $this->container['record_format'];
    }

    /**
     * Sets record_format
     *
     * @param AllOfResponseUserRecordFormat $record_format record_format
     *
     * @return $this
     */
    public function setRecordFormat($record_format)
    {
        $this->container['record_format'] = $record_format;

        return $this;
    }

    /**
     * Gets guard
     *
     * @return AllOfResponseUserGuard
     */
    public function getGuard()
    {
        return $this->container['guard'];
    }

    /**
     * Sets guard
     *
     * @param AllOfResponseUserGuard $guard guard
     *
     * @return $this
     */
    public function setGuard($guard)
    {
        $this->container['guard'] = $guard;

        return $this;
    }

    /**
     * Gets catch_all
     *
     * @return AllOfResponseUserCatchAll
     */
    public function getCatchAll()
    {
        return $this->container['catch_all'];
    }

    /**
     * Sets catch_all
     *
     * @param AllOfResponseUserCatchAll $catch_all catch_all
     *
     * @return $this
     */
    public function setCatchAll($catch_all)
    {
        $this->container['catch_all'] = $catch_all;

        return $this;
    }

    /**
     * Gets retention_time
     *
     * @return AllOfResponseUserRetentionTime
     */
    public function getRetentionTime()
    {
        return $this->container['retention_time'];
    }

    /**
     * Sets retention_time
     *
     * @param AllOfResponseUserRetentionTime $retention_time retention_time
     *
     * @return $this
     */
    public function setRetentionTime($retention_time)
    {
        $this->container['retention_time'] = $retention_time;

        return $this;
    }

    /**
     * Gets playlist_account_state
     *
     * @return AllOfResponseUserPlaylistAccountState
     */
    public function getPlaylistAccountState()
    {
        return $this->container['playlist_account_state'];
    }

    /**
     * Sets playlist_account_state
     *
     * @param AllOfResponseUserPlaylistAccountState $playlist_account_state playlist_account_state
     *
     * @return $this
     */
    public function setPlaylistAccountState($playlist_account_state)
    {
        $this->container['playlist_account_state'] = $playlist_account_state;

        return $this;
    }

    /**
     * Gets live_streaming
     *
     * @return AllOfResponseUserLiveStreaming
     */
    public function getLiveStreaming()
    {
        return $this->container['live_streaming'];
    }

    /**
     * Sets live_streaming
     *
     * @param AllOfResponseUserLiveStreaming $live_streaming live_streaming
     *
     * @return $this
     */
    public function setLiveStreaming($live_streaming)
    {
        $this->container['live_streaming'] = $live_streaming;

        return $this;
    }

    /**
     * Gets erotic
     *
     * @return AllOfResponseUserErotic
     */
    public function getErotic()
    {
        return $this->container['erotic'];
    }

    /**
     * Sets erotic
     *
     * @param AllOfResponseUserErotic $erotic erotic
     *
     * @return $this
     */
    public function setErotic($erotic)
    {
        $this->container['erotic'] = $erotic;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
