<?php
/**
 * ResponseContract
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API v3
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResponseContract Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseContract implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Response.Contract';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'has_xl_package' => 'bool',
'has_xxl_package' => 'bool',
'is_locked' => 'bool',
'is_cancelled' => 'bool',
'is_running' => 'bool',
'package_name' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'has_xl_package' => null,
'has_xxl_package' => null,
'is_locked' => null,
'is_cancelled' => null,
'is_running' => null,
'package_name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'has_xl_package' => 'hasXlPackage',
'has_xxl_package' => 'hasXxlPackage',
'is_locked' => 'isLocked',
'is_cancelled' => 'isCancelled',
'is_running' => 'isRunning',
'package_name' => 'packageName'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'has_xl_package' => 'setHasXlPackage',
'has_xxl_package' => 'setHasXxlPackage',
'is_locked' => 'setIsLocked',
'is_cancelled' => 'setIsCancelled',
'is_running' => 'setIsRunning',
'package_name' => 'setPackageName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'has_xl_package' => 'getHasXlPackage',
'has_xxl_package' => 'getHasXxlPackage',
'is_locked' => 'getIsLocked',
'is_cancelled' => 'getIsCancelled',
'is_running' => 'getIsRunning',
'package_name' => 'getPackageName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['has_xl_package'] = isset($data['has_xl_package']) ? $data['has_xl_package'] : null;
        $this->container['has_xxl_package'] = isset($data['has_xxl_package']) ? $data['has_xxl_package'] : null;
        $this->container['is_locked'] = isset($data['is_locked']) ? $data['is_locked'] : null;
        $this->container['is_cancelled'] = isset($data['is_cancelled']) ? $data['is_cancelled'] : null;
        $this->container['is_running'] = isset($data['is_running']) ? $data['is_running'] : null;
        $this->container['package_name'] = isset($data['package_name']) ? $data['package_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets has_xl_package
     *
     * @return bool
     */
    public function getHasXlPackage()
    {
        return $this->container['has_xl_package'];
    }

    /**
     * Sets has_xl_package
     *
     * @param bool $has_xl_package has_xl_package
     *
     * @return $this
     */
    public function setHasXlPackage($has_xl_package)
    {
        $this->container['has_xl_package'] = $has_xl_package;

        return $this;
    }

    /**
     * Gets has_xxl_package
     *
     * @return bool
     */
    public function getHasXxlPackage()
    {
        return $this->container['has_xxl_package'];
    }

    /**
     * Sets has_xxl_package
     *
     * @param bool $has_xxl_package has_xxl_package
     *
     * @return $this
     */
    public function setHasXxlPackage($has_xxl_package)
    {
        $this->container['has_xxl_package'] = $has_xxl_package;

        return $this;
    }

    /**
     * Gets is_locked
     *
     * @return bool
     */
    public function getIsLocked()
    {
        return $this->container['is_locked'];
    }

    /**
     * Sets is_locked
     *
     * @param bool $is_locked is_locked
     *
     * @return $this
     */
    public function setIsLocked($is_locked)
    {
        $this->container['is_locked'] = $is_locked;

        return $this;
    }

    /**
     * Gets is_cancelled
     *
     * @return bool
     */
    public function getIsCancelled()
    {
        return $this->container['is_cancelled'];
    }

    /**
     * Sets is_cancelled
     *
     * @param bool $is_cancelled is_cancelled
     *
     * @return $this
     */
    public function setIsCancelled($is_cancelled)
    {
        $this->container['is_cancelled'] = $is_cancelled;

        return $this;
    }

    /**
     * Gets is_running
     *
     * @return bool
     */
    public function getIsRunning()
    {
        return $this->container['is_running'];
    }

    /**
     * Sets is_running
     *
     * @param bool $is_running is_running
     *
     * @return $this
     */
    public function setIsRunning($is_running)
    {
        $this->container['is_running'] = $is_running;

        return $this;
    }

    /**
     * Gets package_name
     *
     * @return string
     */
    public function getPackageName()
    {
        return $this->container['package_name'];
    }

    /**
     * Sets package_name
     *
     * @param string $package_name package_name
     *
     * @return $this
     */
    public function setPackageName($package_name)
    {
        $this->container['package_name'] = $package_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
