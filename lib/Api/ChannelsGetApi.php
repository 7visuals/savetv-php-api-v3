<?php
/**
 * ChannelsGetApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API v3
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ChannelsGetApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChannelsGetApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v3ChannelsChannelIdGet
     *
     * Retrieves a single channel with the given identifier.
     *
     * @param  int $channel_id The channel identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;channeltype, id\&quot; are always transmitted.    _The allowed field values:_    channelscope,    channeltype,    counttelecasts,    id,    imageurl100,    imageurl250,    imageurl500,    name,    searchquery,    star.id,    star.name,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.name,    tvsubcategory.id,    tvsubcategory.name (optional, default to ["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"])
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Channel
     */
    public function v3ChannelsChannelIdGet($channel_id, $fields = '["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"]')
    {
        list($response) = $this->v3ChannelsChannelIdGetWithHttpInfo($channel_id, $fields);
        return $response;
    }

    /**
     * Operation v3ChannelsChannelIdGetWithHttpInfo
     *
     * Retrieves a single channel with the given identifier.
     *
     * @param  int $channel_id The channel identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;channeltype, id\&quot; are always transmitted.    _The allowed field values:_    channelscope,    channeltype,    counttelecasts,    id,    imageurl100,    imageurl250,    imageurl500,    name,    searchquery,    star.id,    star.name,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.name,    tvsubcategory.id,    tvsubcategory.name (optional, default to ["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"])
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Channel, HTTP status code, HTTP response headers (array of strings)
     */
    public function v3ChannelsChannelIdGetWithHttpInfo($channel_id, $fields = '["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"]')
    {
        $returnType = '\Swagger\Client\Model\Channel';
        $request = $this->v3ChannelsChannelIdGetRequest($channel_id, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Channel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v3ChannelsChannelIdGetAsync
     *
     * Retrieves a single channel with the given identifier.
     *
     * @param  int $channel_id The channel identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;channeltype, id\&quot; are always transmitted.    _The allowed field values:_    channelscope,    channeltype,    counttelecasts,    id,    imageurl100,    imageurl250,    imageurl500,    name,    searchquery,    star.id,    star.name,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.name,    tvsubcategory.id,    tvsubcategory.name (optional, default to ["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3ChannelsChannelIdGetAsync($channel_id, $fields = '["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"]')
    {
        return $this->v3ChannelsChannelIdGetAsyncWithHttpInfo($channel_id, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3ChannelsChannelIdGetAsyncWithHttpInfo
     *
     * Retrieves a single channel with the given identifier.
     *
     * @param  int $channel_id The channel identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;channeltype, id\&quot; are always transmitted.    _The allowed field values:_    channelscope,    channeltype,    counttelecasts,    id,    imageurl100,    imageurl250,    imageurl500,    name,    searchquery,    star.id,    star.name,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.name,    tvsubcategory.id,    tvsubcategory.name (optional, default to ["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3ChannelsChannelIdGetAsyncWithHttpInfo($channel_id, $fields = '["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"]')
    {
        $returnType = '\Swagger\Client\Model\Channel';
        $request = $this->v3ChannelsChannelIdGetRequest($channel_id, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3ChannelsChannelIdGet'
     *
     * @param  int $channel_id The channel identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;channeltype, id\&quot; are always transmitted.    _The allowed field values:_    channelscope,    channeltype,    counttelecasts,    id,    imageurl100,    imageurl250,    imageurl500,    name,    searchquery,    star.id,    star.name,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.name,    tvsubcategory.id,    tvsubcategory.name (optional, default to ["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3ChannelsChannelIdGetRequest($channel_id, $fields = '["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"]')
    {
        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling v3ChannelsChannelIdGet'
            );
        }

        $resourcePath = '/v3/channels/{channelId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($channel_id !== null) {
            $resourcePath = str_replace(
                '{' . 'channelId' . '}',
                ObjectSerializer::toPathValue($channel_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/x.cf-json-base64']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/x.cf-json-base64'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v3ChannelsChannelIdTelecastsGet
     *
     * Retrieves the telecasts that matches the channel criteria.
     *
     * @param  int $channel_id The channel identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    characterization,    commentator,    country,    createdate,    description,    director,    enddate,    episode,    existsrecord,    guests,    id,    imageurl100,    imageurl250,    imageurl500,    interpret,    isblackwhite,    ishighlight,    isomitted,    moderator,    originaltitle,    rating,    roles,    roles.rolename,    roles.starid,    roles.starname,    slug,    startdate,    subject,    subtitle,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.largelogourl,    tvstation.name,    tvstation.smalllogourl,    tvsubcategory.id,    tvsubcategory.name,    updatedate,    voluntaryselfregulationofthemovieindustry,    year (optional, default to ["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"])
     * @param  int $limit Sets the maximum number of items in result set.    The default value: 50.    The maximum allowed value: 2000. (optional)
     * @param  bool $no_paging_header By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values (optional)
     * @param  int $offset Sets the number of data items that are skipped in the result set.    The default value: 0. (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    category    episode    startdate    subcategory    subtitle    title    tvstationposition    year    Default sorting:    +startdate,+tvstationposition (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponsePagedTelecastList
     */
    public function v3ChannelsChannelIdTelecastsGet($channel_id, $fields = '["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"]', $limit = null, $no_paging_header = null, $offset = null, $sort = null)
    {
        list($response) = $this->v3ChannelsChannelIdTelecastsGetWithHttpInfo($channel_id, $fields, $limit, $no_paging_header, $offset, $sort);
        return $response;
    }

    /**
     * Operation v3ChannelsChannelIdTelecastsGetWithHttpInfo
     *
     * Retrieves the telecasts that matches the channel criteria.
     *
     * @param  int $channel_id The channel identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    characterization,    commentator,    country,    createdate,    description,    director,    enddate,    episode,    existsrecord,    guests,    id,    imageurl100,    imageurl250,    imageurl500,    interpret,    isblackwhite,    ishighlight,    isomitted,    moderator,    originaltitle,    rating,    roles,    roles.rolename,    roles.starid,    roles.starname,    slug,    startdate,    subject,    subtitle,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.largelogourl,    tvstation.name,    tvstation.smalllogourl,    tvsubcategory.id,    tvsubcategory.name,    updatedate,    voluntaryselfregulationofthemovieindustry,    year (optional, default to ["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"])
     * @param  int $limit Sets the maximum number of items in result set.    The default value: 50.    The maximum allowed value: 2000. (optional)
     * @param  bool $no_paging_header By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values (optional)
     * @param  int $offset Sets the number of data items that are skipped in the result set.    The default value: 0. (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    category    episode    startdate    subcategory    subtitle    title    tvstationposition    year    Default sorting:    +startdate,+tvstationposition (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponsePagedTelecastList, HTTP status code, HTTP response headers (array of strings)
     */
    public function v3ChannelsChannelIdTelecastsGetWithHttpInfo($channel_id, $fields = '["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"]', $limit = null, $no_paging_header = null, $offset = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\ResponsePagedTelecastList';
        $request = $this->v3ChannelsChannelIdTelecastsGetRequest($channel_id, $fields, $limit, $no_paging_header, $offset, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponsePagedTelecastList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v3ChannelsChannelIdTelecastsGetAsync
     *
     * Retrieves the telecasts that matches the channel criteria.
     *
     * @param  int $channel_id The channel identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    characterization,    commentator,    country,    createdate,    description,    director,    enddate,    episode,    existsrecord,    guests,    id,    imageurl100,    imageurl250,    imageurl500,    interpret,    isblackwhite,    ishighlight,    isomitted,    moderator,    originaltitle,    rating,    roles,    roles.rolename,    roles.starid,    roles.starname,    slug,    startdate,    subject,    subtitle,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.largelogourl,    tvstation.name,    tvstation.smalllogourl,    tvsubcategory.id,    tvsubcategory.name,    updatedate,    voluntaryselfregulationofthemovieindustry,    year (optional, default to ["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"])
     * @param  int $limit Sets the maximum number of items in result set.    The default value: 50.    The maximum allowed value: 2000. (optional)
     * @param  bool $no_paging_header By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values (optional)
     * @param  int $offset Sets the number of data items that are skipped in the result set.    The default value: 0. (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    category    episode    startdate    subcategory    subtitle    title    tvstationposition    year    Default sorting:    +startdate,+tvstationposition (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3ChannelsChannelIdTelecastsGetAsync($channel_id, $fields = '["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"]', $limit = null, $no_paging_header = null, $offset = null, $sort = null)
    {
        return $this->v3ChannelsChannelIdTelecastsGetAsyncWithHttpInfo($channel_id, $fields, $limit, $no_paging_header, $offset, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3ChannelsChannelIdTelecastsGetAsyncWithHttpInfo
     *
     * Retrieves the telecasts that matches the channel criteria.
     *
     * @param  int $channel_id The channel identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    characterization,    commentator,    country,    createdate,    description,    director,    enddate,    episode,    existsrecord,    guests,    id,    imageurl100,    imageurl250,    imageurl500,    interpret,    isblackwhite,    ishighlight,    isomitted,    moderator,    originaltitle,    rating,    roles,    roles.rolename,    roles.starid,    roles.starname,    slug,    startdate,    subject,    subtitle,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.largelogourl,    tvstation.name,    tvstation.smalllogourl,    tvsubcategory.id,    tvsubcategory.name,    updatedate,    voluntaryselfregulationofthemovieindustry,    year (optional, default to ["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"])
     * @param  int $limit Sets the maximum number of items in result set.    The default value: 50.    The maximum allowed value: 2000. (optional)
     * @param  bool $no_paging_header By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values (optional)
     * @param  int $offset Sets the number of data items that are skipped in the result set.    The default value: 0. (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    category    episode    startdate    subcategory    subtitle    title    tvstationposition    year    Default sorting:    +startdate,+tvstationposition (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3ChannelsChannelIdTelecastsGetAsyncWithHttpInfo($channel_id, $fields = '["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"]', $limit = null, $no_paging_header = null, $offset = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\ResponsePagedTelecastList';
        $request = $this->v3ChannelsChannelIdTelecastsGetRequest($channel_id, $fields, $limit, $no_paging_header, $offset, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3ChannelsChannelIdTelecastsGet'
     *
     * @param  int $channel_id The channel identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    characterization,    commentator,    country,    createdate,    description,    director,    enddate,    episode,    existsrecord,    guests,    id,    imageurl100,    imageurl250,    imageurl500,    interpret,    isblackwhite,    ishighlight,    isomitted,    moderator,    originaltitle,    rating,    roles,    roles.rolename,    roles.starid,    roles.starname,    slug,    startdate,    subject,    subtitle,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.largelogourl,    tvstation.name,    tvstation.smalllogourl,    tvsubcategory.id,    tvsubcategory.name,    updatedate,    voluntaryselfregulationofthemovieindustry,    year (optional, default to ["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"])
     * @param  int $limit Sets the maximum number of items in result set.    The default value: 50.    The maximum allowed value: 2000. (optional)
     * @param  bool $no_paging_header By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values (optional)
     * @param  int $offset Sets the number of data items that are skipped in the result set.    The default value: 0. (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    category    episode    startdate    subcategory    subtitle    title    tvstationposition    year    Default sorting:    +startdate,+tvstationposition (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3ChannelsChannelIdTelecastsGetRequest($channel_id, $fields = '["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"]', $limit = null, $no_paging_header = null, $offset = null, $sort = null)
    {
        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling v3ChannelsChannelIdTelecastsGet'
            );
        }

        $resourcePath = '/v3/channels/{channelId}/telecasts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($no_paging_header !== null) {
            $queryParams['noPagingHeader'] = ObjectSerializer::toQueryValue($no_paging_header);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if (is_array($sort)) {
            $sort = ObjectSerializer::serializeCollection($sort, 'multi', true);
        }
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }

        // path params
        if ($channel_id !== null) {
            $resourcePath = str_replace(
                '{' . 'channelId' . '}',
                ObjectSerializer::toPathValue($channel_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/x.cf-json-base64']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/x.cf-json-base64'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v3ChannelsChannelIdTelecastsTelecastIdGet
     *
     * Retrieves the telecasts that matches the channel criteria.
     *
     * @param  int $channel_id The identifier of the channel. (required)
     * @param  int $telecast_id The identifier of the telecast. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    characterization,    commentator,    country,    createdate,    description,    director,    enddate,    episode,    existsrecord,    guests,    id,    imageurl100,    imageurl250,    imageurl500,    interpret,    isblackwhite,    ishighlight,    isomitted,    moderator,    originaltitle,    rating,    roles,    roles.rolename,    roles.starid,    roles.starname,    slug,    startdate,    subject,    subtitle,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.largelogourl,    tvstation.name,    tvstation.smalllogourl,    tvsubcategory.id,    tvsubcategory.name,    updatedate,    voluntaryselfregulationofthemovieindustry,    year (optional, default to ["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"])
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponsePagedTelecastList
     */
    public function v3ChannelsChannelIdTelecastsTelecastIdGet($channel_id, $telecast_id, $fields = '["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"]')
    {
        list($response) = $this->v3ChannelsChannelIdTelecastsTelecastIdGetWithHttpInfo($channel_id, $telecast_id, $fields);
        return $response;
    }

    /**
     * Operation v3ChannelsChannelIdTelecastsTelecastIdGetWithHttpInfo
     *
     * Retrieves the telecasts that matches the channel criteria.
     *
     * @param  int $channel_id The identifier of the channel. (required)
     * @param  int $telecast_id The identifier of the telecast. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    characterization,    commentator,    country,    createdate,    description,    director,    enddate,    episode,    existsrecord,    guests,    id,    imageurl100,    imageurl250,    imageurl500,    interpret,    isblackwhite,    ishighlight,    isomitted,    moderator,    originaltitle,    rating,    roles,    roles.rolename,    roles.starid,    roles.starname,    slug,    startdate,    subject,    subtitle,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.largelogourl,    tvstation.name,    tvstation.smalllogourl,    tvsubcategory.id,    tvsubcategory.name,    updatedate,    voluntaryselfregulationofthemovieindustry,    year (optional, default to ["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"])
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponsePagedTelecastList, HTTP status code, HTTP response headers (array of strings)
     */
    public function v3ChannelsChannelIdTelecastsTelecastIdGetWithHttpInfo($channel_id, $telecast_id, $fields = '["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"]')
    {
        $returnType = '\Swagger\Client\Model\ResponsePagedTelecastList';
        $request = $this->v3ChannelsChannelIdTelecastsTelecastIdGetRequest($channel_id, $telecast_id, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponsePagedTelecastList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v3ChannelsChannelIdTelecastsTelecastIdGetAsync
     *
     * Retrieves the telecasts that matches the channel criteria.
     *
     * @param  int $channel_id The identifier of the channel. (required)
     * @param  int $telecast_id The identifier of the telecast. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    characterization,    commentator,    country,    createdate,    description,    director,    enddate,    episode,    existsrecord,    guests,    id,    imageurl100,    imageurl250,    imageurl500,    interpret,    isblackwhite,    ishighlight,    isomitted,    moderator,    originaltitle,    rating,    roles,    roles.rolename,    roles.starid,    roles.starname,    slug,    startdate,    subject,    subtitle,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.largelogourl,    tvstation.name,    tvstation.smalllogourl,    tvsubcategory.id,    tvsubcategory.name,    updatedate,    voluntaryselfregulationofthemovieindustry,    year (optional, default to ["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3ChannelsChannelIdTelecastsTelecastIdGetAsync($channel_id, $telecast_id, $fields = '["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"]')
    {
        return $this->v3ChannelsChannelIdTelecastsTelecastIdGetAsyncWithHttpInfo($channel_id, $telecast_id, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3ChannelsChannelIdTelecastsTelecastIdGetAsyncWithHttpInfo
     *
     * Retrieves the telecasts that matches the channel criteria.
     *
     * @param  int $channel_id The identifier of the channel. (required)
     * @param  int $telecast_id The identifier of the telecast. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    characterization,    commentator,    country,    createdate,    description,    director,    enddate,    episode,    existsrecord,    guests,    id,    imageurl100,    imageurl250,    imageurl500,    interpret,    isblackwhite,    ishighlight,    isomitted,    moderator,    originaltitle,    rating,    roles,    roles.rolename,    roles.starid,    roles.starname,    slug,    startdate,    subject,    subtitle,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.largelogourl,    tvstation.name,    tvstation.smalllogourl,    tvsubcategory.id,    tvsubcategory.name,    updatedate,    voluntaryselfregulationofthemovieindustry,    year (optional, default to ["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3ChannelsChannelIdTelecastsTelecastIdGetAsyncWithHttpInfo($channel_id, $telecast_id, $fields = '["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"]')
    {
        $returnType = '\Swagger\Client\Model\ResponsePagedTelecastList';
        $request = $this->v3ChannelsChannelIdTelecastsTelecastIdGetRequest($channel_id, $telecast_id, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3ChannelsChannelIdTelecastsTelecastIdGet'
     *
     * @param  int $channel_id The identifier of the channel. (required)
     * @param  int $telecast_id The identifier of the telecast. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    characterization,    commentator,    country,    createdate,    description,    director,    enddate,    episode,    existsrecord,    guests,    id,    imageurl100,    imageurl250,    imageurl500,    interpret,    isblackwhite,    ishighlight,    isomitted,    moderator,    originaltitle,    rating,    roles,    roles.rolename,    roles.starid,    roles.starname,    slug,    startdate,    subject,    subtitle,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.largelogourl,    tvstation.name,    tvstation.smalllogourl,    tvsubcategory.id,    tvsubcategory.name,    updatedate,    voluntaryselfregulationofthemovieindustry,    year (optional, default to ["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3ChannelsChannelIdTelecastsTelecastIdGetRequest($channel_id, $telecast_id, $fields = '["characterization, commentator, country, createdate, description, director, enddate, episode, existsrecord, guests, id, imageurl100, imageurl250, imageurl500, interpret, isblackwhite, ishighlight, isomitted, moderator, originaltitle, rating, roles, roles.rolename, roles.starid, roles.starname, slug, startdate, subject, subtitle, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.largelogourl, tvstation.name, tvstation.smalllogourl, tvsubcategory.id, tvsubcategory.name, updatedate, voluntaryselfregulationofthemovieindustry, year"]')
    {
        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling v3ChannelsChannelIdTelecastsTelecastIdGet'
            );
        }
        // verify the required parameter 'telecast_id' is set
        if ($telecast_id === null || (is_array($telecast_id) && count($telecast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telecast_id when calling v3ChannelsChannelIdTelecastsTelecastIdGet'
            );
        }

        $resourcePath = '/v3/channels/{channelId}/telecasts/{telecastId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($channel_id !== null) {
            $resourcePath = str_replace(
                '{' . 'channelId' . '}',
                ObjectSerializer::toPathValue($channel_id),
                $resourcePath
            );
        }
        // path params
        if ($telecast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'telecastId' . '}',
                ObjectSerializer::toPathValue($telecast_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/x.cf-json-base64']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/x.cf-json-base64'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v3ChannelsCountGet
     *
     * Retrieves the number of channels for the current account.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseChannelCount
     */
    public function v3ChannelsCountGet()
    {
        list($response) = $this->v3ChannelsCountGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation v3ChannelsCountGetWithHttpInfo
     *
     * Retrieves the number of channels for the current account.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseChannelCount, HTTP status code, HTTP response headers (array of strings)
     */
    public function v3ChannelsCountGetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\ResponseChannelCount';
        $request = $this->v3ChannelsCountGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseChannelCount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v3ChannelsCountGetAsync
     *
     * Retrieves the number of channels for the current account.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3ChannelsCountGetAsync()
    {
        return $this->v3ChannelsCountGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3ChannelsCountGetAsyncWithHttpInfo
     *
     * Retrieves the number of channels for the current account.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3ChannelsCountGetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\ResponseChannelCount';
        $request = $this->v3ChannelsCountGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3ChannelsCountGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3ChannelsCountGetRequest()
    {

        $resourcePath = '/v3/channels/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/x.cf-json-base64']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/x.cf-json-base64'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v3ChannelsGet
     *
     * Retrieves the channels for the current account.
     *
     * @param  \Swagger\Client\Model\RequestChannelScope $channel_scope The channel scope determines which channels will be returned.    Values:    0 &#x3D; Selects all channels    1 &#x3D; Selects only standard channels    2 &#x3D; Selects only channels created by Catch All    The default value: 0 (optional)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;channeltype, id\&quot; are always transmitted.    _The allowed field values:_    channelscope,    channeltype,    counttelecasts,    id,    imageurl100,    imageurl250,    imageurl500,    name,    searchquery,    star.id,    star.name,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.name,    tvsubcategory.id,    tvsubcategory.name (optional, default to ["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"])
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    Default sorting:    +name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseChannel[]
     */
    public function v3ChannelsGet($channel_scope = null, $fields = '["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"]', $sort = null)
    {
        list($response) = $this->v3ChannelsGetWithHttpInfo($channel_scope, $fields, $sort);
        return $response;
    }

    /**
     * Operation v3ChannelsGetWithHttpInfo
     *
     * Retrieves the channels for the current account.
     *
     * @param  \Swagger\Client\Model\RequestChannelScope $channel_scope The channel scope determines which channels will be returned.    Values:    0 &#x3D; Selects all channels    1 &#x3D; Selects only standard channels    2 &#x3D; Selects only channels created by Catch All    The default value: 0 (optional)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;channeltype, id\&quot; are always transmitted.    _The allowed field values:_    channelscope,    channeltype,    counttelecasts,    id,    imageurl100,    imageurl250,    imageurl500,    name,    searchquery,    star.id,    star.name,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.name,    tvsubcategory.id,    tvsubcategory.name (optional, default to ["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"])
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    Default sorting:    +name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseChannel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v3ChannelsGetWithHttpInfo($channel_scope = null, $fields = '["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"]', $sort = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseChannel[]';
        $request = $this->v3ChannelsGetRequest($channel_scope, $fields, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseChannel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v3ChannelsGetAsync
     *
     * Retrieves the channels for the current account.
     *
     * @param  \Swagger\Client\Model\RequestChannelScope $channel_scope The channel scope determines which channels will be returned.    Values:    0 &#x3D; Selects all channels    1 &#x3D; Selects only standard channels    2 &#x3D; Selects only channels created by Catch All    The default value: 0 (optional)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;channeltype, id\&quot; are always transmitted.    _The allowed field values:_    channelscope,    channeltype,    counttelecasts,    id,    imageurl100,    imageurl250,    imageurl500,    name,    searchquery,    star.id,    star.name,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.name,    tvsubcategory.id,    tvsubcategory.name (optional, default to ["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"])
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    Default sorting:    +name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3ChannelsGetAsync($channel_scope = null, $fields = '["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"]', $sort = null)
    {
        return $this->v3ChannelsGetAsyncWithHttpInfo($channel_scope, $fields, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3ChannelsGetAsyncWithHttpInfo
     *
     * Retrieves the channels for the current account.
     *
     * @param  \Swagger\Client\Model\RequestChannelScope $channel_scope The channel scope determines which channels will be returned.    Values:    0 &#x3D; Selects all channels    1 &#x3D; Selects only standard channels    2 &#x3D; Selects only channels created by Catch All    The default value: 0 (optional)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;channeltype, id\&quot; are always transmitted.    _The allowed field values:_    channelscope,    channeltype,    counttelecasts,    id,    imageurl100,    imageurl250,    imageurl500,    name,    searchquery,    star.id,    star.name,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.name,    tvsubcategory.id,    tvsubcategory.name (optional, default to ["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"])
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    Default sorting:    +name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3ChannelsGetAsyncWithHttpInfo($channel_scope = null, $fields = '["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"]', $sort = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseChannel[]';
        $request = $this->v3ChannelsGetRequest($channel_scope, $fields, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3ChannelsGet'
     *
     * @param  \Swagger\Client\Model\RequestChannelScope $channel_scope The channel scope determines which channels will be returned.    Values:    0 &#x3D; Selects all channels    1 &#x3D; Selects only standard channels    2 &#x3D; Selects only channels created by Catch All    The default value: 0 (optional)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;channeltype, id\&quot; are always transmitted.    _The allowed field values:_    channelscope,    channeltype,    counttelecasts,    id,    imageurl100,    imageurl250,    imageurl500,    name,    searchquery,    star.id,    star.name,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.name,    tvsubcategory.id,    tvsubcategory.name (optional, default to ["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"])
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    Default sorting:    +name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3ChannelsGetRequest($channel_scope = null, $fields = '["channelscope, channeltype, counttelecasts, id, imageurl100, imageurl250, imageurl500, name, searchquery, star.id, star.name, title, tvcategory.id, tvcategory.name, tvstation.id, tvstation.isrecordable, tvstation.name, tvsubcategory.id, tvsubcategory.name"]', $sort = null)
    {

        $resourcePath = '/v3/channels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($channel_scope !== null) {
            $queryParams['channelScope'] = ObjectSerializer::toQueryValue($channel_scope);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($sort)) {
            $sort = ObjectSerializer::serializeCollection($sort, 'multi', true);
        }
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/x.cf-json-base64']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/x.cf-json-base64'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
