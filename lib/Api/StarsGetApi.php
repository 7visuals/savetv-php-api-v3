<?php
/**
 * StarsGetApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API v3
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * StarsGetApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StarsGetApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v3StarsGet
     *
     * Retrieves the stars that match the filter condition.
     *
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    alternativename,    awards,    awards.count,    awards.name,    birthdate,    birthplace,    dateofdeath,    description,    height,    id,    imageurls100,    imageurls250,    imageurls500,    ishighlight,    links,    links.title,    links.url,    name,    nickname,    placeofdeath (optional, default to ["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"])
     * @param  bool $has_birthday_today Determines whether the star must have birthday today or not. (optional)
     * @param  int[] $ids A comma-separated list of star identifiers. (optional)
     * @param  bool $is_highlight Determines whether the star is marked as important star or not. (optional)
     * @param  int $limit Sets the maximum number of items in result set.    The default value: 20.    The maximum allowed value: 500. (optional)
     * @param  bool $no_paging_header By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values (optional)
     * @param  int $offset Sets the number of data items that are skipped in the result set.    The default value: 0. (optional)
     * @param  bool $plays_part_in_upcoming_telecast Determines whether the star plays in a telecast within the future EPG. (optional)
     * @param  string $q The search text used for a text search. (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    position    Default sorting:    +name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponsePagedStarList
     */
    public function v3StarsGet($fields = '["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"]', $has_birthday_today = null, $ids = null, $is_highlight = null, $limit = null, $no_paging_header = null, $offset = null, $plays_part_in_upcoming_telecast = null, $q = null, $sort = null)
    {
        list($response) = $this->v3StarsGetWithHttpInfo($fields, $has_birthday_today, $ids, $is_highlight, $limit, $no_paging_header, $offset, $plays_part_in_upcoming_telecast, $q, $sort);
        return $response;
    }

    /**
     * Operation v3StarsGetWithHttpInfo
     *
     * Retrieves the stars that match the filter condition.
     *
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    alternativename,    awards,    awards.count,    awards.name,    birthdate,    birthplace,    dateofdeath,    description,    height,    id,    imageurls100,    imageurls250,    imageurls500,    ishighlight,    links,    links.title,    links.url,    name,    nickname,    placeofdeath (optional, default to ["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"])
     * @param  bool $has_birthday_today Determines whether the star must have birthday today or not. (optional)
     * @param  int[] $ids A comma-separated list of star identifiers. (optional)
     * @param  bool $is_highlight Determines whether the star is marked as important star or not. (optional)
     * @param  int $limit Sets the maximum number of items in result set.    The default value: 20.    The maximum allowed value: 500. (optional)
     * @param  bool $no_paging_header By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values (optional)
     * @param  int $offset Sets the number of data items that are skipped in the result set.    The default value: 0. (optional)
     * @param  bool $plays_part_in_upcoming_telecast Determines whether the star plays in a telecast within the future EPG. (optional)
     * @param  string $q The search text used for a text search. (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    position    Default sorting:    +name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponsePagedStarList, HTTP status code, HTTP response headers (array of strings)
     */
    public function v3StarsGetWithHttpInfo($fields = '["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"]', $has_birthday_today = null, $ids = null, $is_highlight = null, $limit = null, $no_paging_header = null, $offset = null, $plays_part_in_upcoming_telecast = null, $q = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\ResponsePagedStarList';
        $request = $this->v3StarsGetRequest($fields, $has_birthday_today, $ids, $is_highlight, $limit, $no_paging_header, $offset, $plays_part_in_upcoming_telecast, $q, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponsePagedStarList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v3StarsGetAsync
     *
     * Retrieves the stars that match the filter condition.
     *
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    alternativename,    awards,    awards.count,    awards.name,    birthdate,    birthplace,    dateofdeath,    description,    height,    id,    imageurls100,    imageurls250,    imageurls500,    ishighlight,    links,    links.title,    links.url,    name,    nickname,    placeofdeath (optional, default to ["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"])
     * @param  bool $has_birthday_today Determines whether the star must have birthday today or not. (optional)
     * @param  int[] $ids A comma-separated list of star identifiers. (optional)
     * @param  bool $is_highlight Determines whether the star is marked as important star or not. (optional)
     * @param  int $limit Sets the maximum number of items in result set.    The default value: 20.    The maximum allowed value: 500. (optional)
     * @param  bool $no_paging_header By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values (optional)
     * @param  int $offset Sets the number of data items that are skipped in the result set.    The default value: 0. (optional)
     * @param  bool $plays_part_in_upcoming_telecast Determines whether the star plays in a telecast within the future EPG. (optional)
     * @param  string $q The search text used for a text search. (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    position    Default sorting:    +name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3StarsGetAsync($fields = '["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"]', $has_birthday_today = null, $ids = null, $is_highlight = null, $limit = null, $no_paging_header = null, $offset = null, $plays_part_in_upcoming_telecast = null, $q = null, $sort = null)
    {
        return $this->v3StarsGetAsyncWithHttpInfo($fields, $has_birthday_today, $ids, $is_highlight, $limit, $no_paging_header, $offset, $plays_part_in_upcoming_telecast, $q, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3StarsGetAsyncWithHttpInfo
     *
     * Retrieves the stars that match the filter condition.
     *
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    alternativename,    awards,    awards.count,    awards.name,    birthdate,    birthplace,    dateofdeath,    description,    height,    id,    imageurls100,    imageurls250,    imageurls500,    ishighlight,    links,    links.title,    links.url,    name,    nickname,    placeofdeath (optional, default to ["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"])
     * @param  bool $has_birthday_today Determines whether the star must have birthday today or not. (optional)
     * @param  int[] $ids A comma-separated list of star identifiers. (optional)
     * @param  bool $is_highlight Determines whether the star is marked as important star or not. (optional)
     * @param  int $limit Sets the maximum number of items in result set.    The default value: 20.    The maximum allowed value: 500. (optional)
     * @param  bool $no_paging_header By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values (optional)
     * @param  int $offset Sets the number of data items that are skipped in the result set.    The default value: 0. (optional)
     * @param  bool $plays_part_in_upcoming_telecast Determines whether the star plays in a telecast within the future EPG. (optional)
     * @param  string $q The search text used for a text search. (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    position    Default sorting:    +name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3StarsGetAsyncWithHttpInfo($fields = '["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"]', $has_birthday_today = null, $ids = null, $is_highlight = null, $limit = null, $no_paging_header = null, $offset = null, $plays_part_in_upcoming_telecast = null, $q = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\ResponsePagedStarList';
        $request = $this->v3StarsGetRequest($fields, $has_birthday_today, $ids, $is_highlight, $limit, $no_paging_header, $offset, $plays_part_in_upcoming_telecast, $q, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3StarsGet'
     *
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    alternativename,    awards,    awards.count,    awards.name,    birthdate,    birthplace,    dateofdeath,    description,    height,    id,    imageurls100,    imageurls250,    imageurls500,    ishighlight,    links,    links.title,    links.url,    name,    nickname,    placeofdeath (optional, default to ["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"])
     * @param  bool $has_birthday_today Determines whether the star must have birthday today or not. (optional)
     * @param  int[] $ids A comma-separated list of star identifiers. (optional)
     * @param  bool $is_highlight Determines whether the star is marked as important star or not. (optional)
     * @param  int $limit Sets the maximum number of items in result set.    The default value: 20.    The maximum allowed value: 500. (optional)
     * @param  bool $no_paging_header By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values (optional)
     * @param  int $offset Sets the number of data items that are skipped in the result set.    The default value: 0. (optional)
     * @param  bool $plays_part_in_upcoming_telecast Determines whether the star plays in a telecast within the future EPG. (optional)
     * @param  string $q The search text used for a text search. (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    position    Default sorting:    +name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3StarsGetRequest($fields = '["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"]', $has_birthday_today = null, $ids = null, $is_highlight = null, $limit = null, $no_paging_header = null, $offset = null, $plays_part_in_upcoming_telecast = null, $q = null, $sort = null)
    {

        $resourcePath = '/v3/stars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($has_birthday_today !== null) {
            $queryParams['hasBirthdayToday'] = ObjectSerializer::toQueryValue($has_birthday_today);
        }
        // query params
        if (is_array($ids)) {
            $ids = ObjectSerializer::serializeCollection($ids, 'multi', true);
        }
        if ($ids !== null) {
            $queryParams['ids'] = ObjectSerializer::toQueryValue($ids);
        }
        // query params
        if ($is_highlight !== null) {
            $queryParams['isHighlight'] = ObjectSerializer::toQueryValue($is_highlight);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($no_paging_header !== null) {
            $queryParams['noPagingHeader'] = ObjectSerializer::toQueryValue($no_paging_header);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($plays_part_in_upcoming_telecast !== null) {
            $queryParams['playsPartInUpcomingTelecast'] = ObjectSerializer::toQueryValue($plays_part_in_upcoming_telecast);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if (is_array($sort)) {
            $sort = ObjectSerializer::serializeCollection($sort, 'multi', true);
        }
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/x.cf-json-base64']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/x.cf-json-base64'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v3StarsStarIdGet
     *
     * Retrieves a single star with the given identifier.
     *
     * @param  int $star_id The identifier of the star. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    alternativename,    awards,    awards.count,    awards.name,    birthdate,    birthplace,    dateofdeath,    description,    height,    id,    imageurls100,    imageurls250,    imageurls500,    ishighlight,    links,    links.title,    links.url,    name,    nickname,    placeofdeath (optional, default to ["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"])
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseStar
     */
    public function v3StarsStarIdGet($star_id, $fields = '["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"]')
    {
        list($response) = $this->v3StarsStarIdGetWithHttpInfo($star_id, $fields);
        return $response;
    }

    /**
     * Operation v3StarsStarIdGetWithHttpInfo
     *
     * Retrieves a single star with the given identifier.
     *
     * @param  int $star_id The identifier of the star. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    alternativename,    awards,    awards.count,    awards.name,    birthdate,    birthplace,    dateofdeath,    description,    height,    id,    imageurls100,    imageurls250,    imageurls500,    ishighlight,    links,    links.title,    links.url,    name,    nickname,    placeofdeath (optional, default to ["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"])
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseStar, HTTP status code, HTTP response headers (array of strings)
     */
    public function v3StarsStarIdGetWithHttpInfo($star_id, $fields = '["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"]')
    {
        $returnType = '\Swagger\Client\Model\ResponseStar';
        $request = $this->v3StarsStarIdGetRequest($star_id, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseStar',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v3StarsStarIdGetAsync
     *
     * Retrieves a single star with the given identifier.
     *
     * @param  int $star_id The identifier of the star. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    alternativename,    awards,    awards.count,    awards.name,    birthdate,    birthplace,    dateofdeath,    description,    height,    id,    imageurls100,    imageurls250,    imageurls500,    ishighlight,    links,    links.title,    links.url,    name,    nickname,    placeofdeath (optional, default to ["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3StarsStarIdGetAsync($star_id, $fields = '["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"]')
    {
        return $this->v3StarsStarIdGetAsyncWithHttpInfo($star_id, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3StarsStarIdGetAsyncWithHttpInfo
     *
     * Retrieves a single star with the given identifier.
     *
     * @param  int $star_id The identifier of the star. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    alternativename,    awards,    awards.count,    awards.name,    birthdate,    birthplace,    dateofdeath,    description,    height,    id,    imageurls100,    imageurls250,    imageurls500,    ishighlight,    links,    links.title,    links.url,    name,    nickname,    placeofdeath (optional, default to ["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3StarsStarIdGetAsyncWithHttpInfo($star_id, $fields = '["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"]')
    {
        $returnType = '\Swagger\Client\Model\ResponseStar';
        $request = $this->v3StarsStarIdGetRequest($star_id, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3StarsStarIdGet'
     *
     * @param  int $star_id The identifier of the star. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;id\&quot; is always transmitted.    _The allowed field values:_    alternativename,    awards,    awards.count,    awards.name,    birthdate,    birthplace,    dateofdeath,    description,    height,    id,    imageurls100,    imageurls250,    imageurls500,    ishighlight,    links,    links.title,    links.url,    name,    nickname,    placeofdeath (optional, default to ["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3StarsStarIdGetRequest($star_id, $fields = '["alternativename, awards, awards.count, awards.name, birthdate, birthplace, dateofdeath, description, height, id, imageurls100, imageurls250, imageurls500, ishighlight, links, links.title, links.url, name, nickname, placeofdeath"]')
    {
        // verify the required parameter 'star_id' is set
        if ($star_id === null || (is_array($star_id) && count($star_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $star_id when calling v3StarsStarIdGet'
            );
        }

        $resourcePath = '/v3/stars/{starId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($star_id !== null) {
            $resourcePath = str_replace(
                '{' . 'starId' . '}',
                ObjectSerializer::toPathValue($star_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/x.cf-json-base64']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/x.cf-json-base64'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
