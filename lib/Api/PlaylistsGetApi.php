<?php
/**
 * PlaylistsGetApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API v3
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PlaylistsGetApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlaylistsGetApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v3PlaylistsCountGet
     *
     * Retrieves the number of own and followed playlists.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponsePlaylistCount
     */
    public function v3PlaylistsCountGet()
    {
        list($response) = $this->v3PlaylistsCountGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation v3PlaylistsCountGetWithHttpInfo
     *
     * Retrieves the number of own and followed playlists.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponsePlaylistCount, HTTP status code, HTTP response headers (array of strings)
     */
    public function v3PlaylistsCountGetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\ResponsePlaylistCount';
        $request = $this->v3PlaylistsCountGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponsePlaylistCount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v3PlaylistsCountGetAsync
     *
     * Retrieves the number of own and followed playlists.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsCountGetAsync()
    {
        return $this->v3PlaylistsCountGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3PlaylistsCountGetAsyncWithHttpInfo
     *
     * Retrieves the number of own and followed playlists.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsCountGetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\ResponsePlaylistCount';
        $request = $this->v3PlaylistsCountGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3PlaylistsCountGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3PlaylistsCountGetRequest()
    {

        $resourcePath = '/v3/playlists/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/x.cf-json-base64']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/x.cf-json-base64'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v3PlaylistsGet
     *
     * Gets the playlists for the current account.
     *
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;id, telecastid\&quot; are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     * @param  bool $is_public is_public (optional)
     * @param  int[] $playlist_ids A list of playlist ids. (optional)
     * @param  int[] $playlist_types A comma-separated list of playlist types.    Values:    1 &#x3D; The special playlist \&quot;Watch later\&quot; (Später ansehen).    2 &#x3D; A playlist created by the user (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    playlisttype    Default sorting:    +name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponsePlaylist[]
     */
    public function v3PlaylistsGet($fields = '["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]', $is_public = null, $playlist_ids = null, $playlist_types = null, $sort = null)
    {
        list($response) = $this->v3PlaylistsGetWithHttpInfo($fields, $is_public, $playlist_ids, $playlist_types, $sort);
        return $response;
    }

    /**
     * Operation v3PlaylistsGetWithHttpInfo
     *
     * Gets the playlists for the current account.
     *
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;id, telecastid\&quot; are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     * @param  bool $is_public (optional)
     * @param  int[] $playlist_ids A list of playlist ids. (optional)
     * @param  int[] $playlist_types A comma-separated list of playlist types.    Values:    1 &#x3D; The special playlist \&quot;Watch later\&quot; (Später ansehen).    2 &#x3D; A playlist created by the user (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    playlisttype    Default sorting:    +name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponsePlaylist[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v3PlaylistsGetWithHttpInfo($fields = '["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]', $is_public = null, $playlist_ids = null, $playlist_types = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\ResponsePlaylist[]';
        $request = $this->v3PlaylistsGetRequest($fields, $is_public, $playlist_ids, $playlist_types, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponsePlaylist[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v3PlaylistsGetAsync
     *
     * Gets the playlists for the current account.
     *
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;id, telecastid\&quot; are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     * @param  bool $is_public (optional)
     * @param  int[] $playlist_ids A list of playlist ids. (optional)
     * @param  int[] $playlist_types A comma-separated list of playlist types.    Values:    1 &#x3D; The special playlist \&quot;Watch later\&quot; (Später ansehen).    2 &#x3D; A playlist created by the user (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    playlisttype    Default sorting:    +name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsGetAsync($fields = '["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]', $is_public = null, $playlist_ids = null, $playlist_types = null, $sort = null)
    {
        return $this->v3PlaylistsGetAsyncWithHttpInfo($fields, $is_public, $playlist_ids, $playlist_types, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3PlaylistsGetAsyncWithHttpInfo
     *
     * Gets the playlists for the current account.
     *
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;id, telecastid\&quot; are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     * @param  bool $is_public (optional)
     * @param  int[] $playlist_ids A list of playlist ids. (optional)
     * @param  int[] $playlist_types A comma-separated list of playlist types.    Values:    1 &#x3D; The special playlist \&quot;Watch later\&quot; (Später ansehen).    2 &#x3D; A playlist created by the user (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    playlisttype    Default sorting:    +name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsGetAsyncWithHttpInfo($fields = '["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]', $is_public = null, $playlist_ids = null, $playlist_types = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\ResponsePlaylist[]';
        $request = $this->v3PlaylistsGetRequest($fields, $is_public, $playlist_ids, $playlist_types, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3PlaylistsGet'
     *
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;id, telecastid\&quot; are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     * @param  bool $is_public (optional)
     * @param  int[] $playlist_ids A list of playlist ids. (optional)
     * @param  int[] $playlist_types A comma-separated list of playlist types.    Values:    1 &#x3D; The special playlist \&quot;Watch later\&quot; (Später ansehen).    2 &#x3D; A playlist created by the user (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    playlisttype    Default sorting:    +name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3PlaylistsGetRequest($fields = '["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]', $is_public = null, $playlist_ids = null, $playlist_types = null, $sort = null)
    {

        $resourcePath = '/v3/playlists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($is_public !== null) {
            $queryParams['isPublic'] = ObjectSerializer::toQueryValue($is_public);
        }
        // query params
        if (is_array($playlist_ids)) {
            $playlist_ids = ObjectSerializer::serializeCollection($playlist_ids, 'multi', true);
        }
        if ($playlist_ids !== null) {
            $queryParams['playlistIds'] = ObjectSerializer::toQueryValue($playlist_ids);
        }
        // query params
        if (is_array($playlist_types)) {
            $playlist_types = ObjectSerializer::serializeCollection($playlist_types, 'multi', true);
        }
        if ($playlist_types !== null) {
            $queryParams['playlistTypes'] = ObjectSerializer::toQueryValue($playlist_types);
        }
        // query params
        if (is_array($sort)) {
            $sort = ObjectSerializer::serializeCollection($sort, 'multi', true);
        }
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/x.cf-json-base64']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/x.cf-json-base64'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v3PlaylistsPlaylistIdGet
     *
     * Gets the details of the playlist specified by the id.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;id, telecastid\&quot; are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponsePlaylist
     */
    public function v3PlaylistsPlaylistIdGet($playlist_id, $fields = '["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]')
    {
        list($response) = $this->v3PlaylistsPlaylistIdGetWithHttpInfo($playlist_id, $fields);
        return $response;
    }

    /**
     * Operation v3PlaylistsPlaylistIdGetWithHttpInfo
     *
     * Gets the details of the playlist specified by the id.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;id, telecastid\&quot; are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponsePlaylist, HTTP status code, HTTP response headers (array of strings)
     */
    public function v3PlaylistsPlaylistIdGetWithHttpInfo($playlist_id, $fields = '["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]')
    {
        $returnType = '\Swagger\Client\Model\ResponsePlaylist';
        $request = $this->v3PlaylistsPlaylistIdGetRequest($playlist_id, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponsePlaylist',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v3PlaylistsPlaylistIdGetAsync
     *
     * Gets the details of the playlist specified by the id.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;id, telecastid\&quot; are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsPlaylistIdGetAsync($playlist_id, $fields = '["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]')
    {
        return $this->v3PlaylistsPlaylistIdGetAsyncWithHttpInfo($playlist_id, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3PlaylistsPlaylistIdGetAsyncWithHttpInfo
     *
     * Gets the details of the playlist specified by the id.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;id, telecastid\&quot; are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsPlaylistIdGetAsyncWithHttpInfo($playlist_id, $fields = '["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]')
    {
        $returnType = '\Swagger\Client\Model\ResponsePlaylist';
        $request = $this->v3PlaylistsPlaylistIdGetRequest($playlist_id, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3PlaylistsPlaylistIdGet'
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;id, telecastid\&quot; are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3PlaylistsPlaylistIdGetRequest($playlist_id, $fields = '["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]')
    {
        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null || (is_array($playlist_id) && count($playlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $playlist_id when calling v3PlaylistsPlaylistIdGet'
            );
        }

        $resourcePath = '/v3/playlists/{playlistId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playlistId' . '}',
                ObjectSerializer::toPathValue($playlist_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/x.cf-json-base64']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/x.cf-json-base64'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v3PlaylistsPlaylistIdItemsGet
     *
     * Gets the items for the playlist.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;telecastid\&quot; is always transmitted.    _The allowed field values:_    fulltitle,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponsePlaylistItem[]
     */
    public function v3PlaylistsPlaylistIdItemsGet($playlist_id, $fields = '["fulltitle, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]')
    {
        list($response) = $this->v3PlaylistsPlaylistIdItemsGetWithHttpInfo($playlist_id, $fields);
        return $response;
    }

    /**
     * Operation v3PlaylistsPlaylistIdItemsGetWithHttpInfo
     *
     * Gets the items for the playlist.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;telecastid\&quot; is always transmitted.    _The allowed field values:_    fulltitle,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponsePlaylistItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v3PlaylistsPlaylistIdItemsGetWithHttpInfo($playlist_id, $fields = '["fulltitle, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]')
    {
        $returnType = '\Swagger\Client\Model\ResponsePlaylistItem[]';
        $request = $this->v3PlaylistsPlaylistIdItemsGetRequest($playlist_id, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponsePlaylistItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v3PlaylistsPlaylistIdItemsGetAsync
     *
     * Gets the items for the playlist.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;telecastid\&quot; is always transmitted.    _The allowed field values:_    fulltitle,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsPlaylistIdItemsGetAsync($playlist_id, $fields = '["fulltitle, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]')
    {
        return $this->v3PlaylistsPlaylistIdItemsGetAsyncWithHttpInfo($playlist_id, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3PlaylistsPlaylistIdItemsGetAsyncWithHttpInfo
     *
     * Gets the items for the playlist.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;telecastid\&quot; is always transmitted.    _The allowed field values:_    fulltitle,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsPlaylistIdItemsGetAsyncWithHttpInfo($playlist_id, $fields = '["fulltitle, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]')
    {
        $returnType = '\Swagger\Client\Model\ResponsePlaylistItem[]';
        $request = $this->v3PlaylistsPlaylistIdItemsGetRequest($playlist_id, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3PlaylistsPlaylistIdItemsGet'
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;telecastid\&quot; is always transmitted.    _The allowed field values:_    fulltitle,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3PlaylistsPlaylistIdItemsGetRequest($playlist_id, $fields = '["fulltitle, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]')
    {
        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null || (is_array($playlist_id) && count($playlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $playlist_id when calling v3PlaylistsPlaylistIdItemsGet'
            );
        }

        $resourcePath = '/v3/playlists/{playlistId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playlistId' . '}',
                ObjectSerializer::toPathValue($playlist_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/x.cf-json-base64']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/x.cf-json-base64'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v3PlaylistsWatchLaterGet
     *
     * Gets the playlist \"watch later\" for the current account.
     *
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;id, telecastid\&quot; are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponsePlaylist
     */
    public function v3PlaylistsWatchLaterGet($fields = '["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]')
    {
        list($response) = $this->v3PlaylistsWatchLaterGetWithHttpInfo($fields);
        return $response;
    }

    /**
     * Operation v3PlaylistsWatchLaterGetWithHttpInfo
     *
     * Gets the playlist \"watch later\" for the current account.
     *
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;id, telecastid\&quot; are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponsePlaylist, HTTP status code, HTTP response headers (array of strings)
     */
    public function v3PlaylistsWatchLaterGetWithHttpInfo($fields = '["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]')
    {
        $returnType = '\Swagger\Client\Model\ResponsePlaylist';
        $request = $this->v3PlaylistsWatchLaterGetRequest($fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponsePlaylist',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v3PlaylistsWatchLaterGetAsync
     *
     * Gets the playlist \"watch later\" for the current account.
     *
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;id, telecastid\&quot; are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsWatchLaterGetAsync($fields = '["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]')
    {
        return $this->v3PlaylistsWatchLaterGetAsyncWithHttpInfo($fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3PlaylistsWatchLaterGetAsyncWithHttpInfo
     *
     * Gets the playlist \"watch later\" for the current account.
     *
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;id, telecastid\&quot; are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsWatchLaterGetAsyncWithHttpInfo($fields = '["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]')
    {
        $returnType = '\Swagger\Client\Model\ResponsePlaylist';
        $request = $this->v3PlaylistsWatchLaterGetRequest($fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3PlaylistsWatchLaterGet'
     *
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \&quot;id, telecastid\&quot; are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid (optional, default to ["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"])
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3PlaylistsWatchLaterGetRequest($fields = '["fulltitle, id, ispublic, itemscount, lasttelecastid, name, playlisttype, record, record.adfreeavailable, record.adfreelength, record.channels, record.channels.id, record.channels.name, record.createdate, record.defect.adcut.availablelength, record.defect.adcut.expectedlength, record.defect.adcut.istelecastendset, record.defect.adcut.istelecaststartset, record.defect.encoding.followuptime.availablelength, record.defect.encoding.followuptime.expectedlength, record.defect.encoding.leadtime.availablelength, record.defect.encoding.leadtime.expectedlength, record.defect.encoding.telecast.availablelength, record.defect.encoding.telecast.expectedlength, record.enddate, record.formats, record.formats.cutvideosize, record.formats.recordformat.id, record.formats.recordformat.name, record.formats.recordstate.id, record.formats.recordstate.name, record.formats.recordstatemessage, record.formats.retentiondate, record.formats.uncutvideosize, record.isadcutenabled, record.playlists.id, record.playlists.name, record.resumepositions, record.resumepositions.adfree, record.resumepositions.default, record.startdate, record.tags.key, record.tags.value, record.updatedate, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.existsrecord, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid"]')
    {

        $resourcePath = '/v3/playlists/watch-later';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/x.cf-json-base64']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/x.cf-json-base64'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
