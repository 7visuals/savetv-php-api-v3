<?php
/**
 * RecordsDeleteApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API v3
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * RecordsDeleteApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RecordsDeleteApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v3RecordsDelete
     *
     * Deletes the records that match the given filter.
     *
     * @param  bool $ad_free_available Determines wether the ad cut list is available. (optional)
     * @param  int[] $channels A comma-separated list of TV channel identifiers. (optional)
     * @param  \Swagger\Client\Model\DayOfWeek[] $day_of_weeks Selects only telecast whose start date matches the given day of weeks. The start date comparison is based on local time.    Values:    0 &#x3D; Sunday    1 &#x3D; Monday    2 &#x3D; Tuesday    3 &#x3D; Wednesday    4 &#x3D; Thursday    5 &#x3D; Friday    6 &#x3D; Saturday (optional)
     * @param  string[] $editorial_telecast_list_ids Selects telecasts from an editorial maintained list.    Values:    stayathomeeducation    stayathomehighlights    stayathomekids    xmas2019 (optional)
     * @param  string $exact_title Selects only telecasts whose title matches exactly (but case insensitive) the given value. (optional)
     * @param  string[] $exact_titles Selects only telecasts whose title matches exactly (but case insensitive) one of the given values.    When the parameter \&quot;exactTitle\&quot; is given too, the value of this parameter is ignored.    The titles are separated by a comma. Commas inside a title are escaped with \&quot;\\,\&quot; (1 back slash, 1 commma).    Example:    Title 1: Tatort    Title 2: Im Himmel, unter der Erde    Value: Tatort,Im Himmel\\, unter der Erde (optional)
     * @param  int[] $excluded_telecast_ids A comma-separated list of telecast identifiers that will be ignored even if the other filter criterias would match these telecasts. (optional)
     * @param  int[] $excluded_tv_stations A comma-separated list of TV station identifiers that must not match. (optional)
     * @param  bool $exclude_repeated_broadcasts exclude_repeated_broadcasts (optional)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;telecastid\&quot; is always transmitted.    _The allowed field values:_    adfreeavailable,    adfreelength,    channels,    channels.id,    channels.name,    createdate,    defect.adcut.availablelength,    defect.adcut.expectedlength,    defect.adcut.istelecastendset,    defect.adcut.istelecaststartset,    defect.encoding.followuptime.availablelength,    defect.encoding.followuptime.expectedlength,    defect.encoding.leadtime.availablelength,    defect.encoding.leadtime.expectedlength,    defect.encoding.telecast.availablelength,    defect.encoding.telecast.expectedlength,    enddate,    formats,    formats.cutvideosize,    formats.recordformat.id,    formats.recordformat.name,    formats.recordstate.id,    formats.recordstate.name,    formats.recordstatemessage,    formats.retentiondate,    formats.uncutvideosize,    isadcutenabled,    playlists.id,    playlists.name,    resumepositions,    resumepositions.adfree,    resumepositions.default,    startdate,    tags.key,    tags.value,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid,    updatedate (optional, default to ["adfreeavailable, adfreelength, channels, channels.id, channels.name, createdate, defect.adcut.availablelength, defect.adcut.expectedlength, defect.adcut.istelecastendset, defect.adcut.istelecaststartset, defect.encoding.followuptime.availablelength, defect.encoding.followuptime.expectedlength, defect.encoding.leadtime.availablelength, defect.encoding.leadtime.expectedlength, defect.encoding.telecast.availablelength, defect.encoding.telecast.expectedlength, enddate, formats, formats.cutvideosize, formats.recordformat.id, formats.recordformat.name, formats.recordstate.id, formats.recordstate.name, formats.recordstatemessage, formats.retentiondate, formats.uncutvideosize, isadcutenabled, playlists.id, playlists.name, resumepositions, resumepositions.adfree, resumepositions.default, startdate, tags.key, tags.value, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid, updatedate"])
     * @param  int[] $fsk Selects only telecasts whose fsk matches the given value.    Values:    0 &#x3D; Includes all ages from 0 to 5.    6 &#x3D; Includes all ages from 6 to 11.    12 &#x3D; Includes all ages from 12 to 15.    16 &#x3D; Includes all ages from 16 to 17.    18 &#x3D; Includes all ages from 18 and above. (optional)
     * @param  bool $is_highlight Determines whether the telecast must be an highlight or not. (optional)
     * @param  \DateTime $last_update_date Selects only records that was updated (finished, ad free available, changed record dates, ...) / created after the given date.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  int $limit Sets the maximum number of items in result set.    The default value: 50.    The maximum allowed value: 5000. (optional)
     * @param  \DateTime $max_end_date The maximum end date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  \DateTime $max_start_date The maximum start date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  \DateTime $min_end_date The minimum end date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  \DateTime $min_start_date The minimum start date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  int $min_start_time_hour min_start_time_hour (optional)
     * @param  int $min_start_time_hour min_start_time_hour (optional)
     * @param  int $min_start_time_minute min_start_time_minute (optional)
     * @param  int $min_start_time_minute min_start_time_minute (optional)
     * @param  bool $no_paging_header By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values (optional)
     * @param  int $offset Sets the number of data items that are skipped in the result set.    The default value: 0. (optional)
     * @param  string $q The search text used for a text search. (optional)
     * @param  \Swagger\Client\Model\RequestRecordFormat[] $record_formats A comma-separated list of record formats. Selects only telecasts that are available in the given formats.    Values:    4 &#x3D; Mobile    5 &#x3D; SD    6 &#x3D; HD (optional)
     * @param  \Swagger\Client\Model\RequestRecordState[] $record_states A comma-separated list of record states.    Values:    1 &#x3D; The user has requested the format.    2 &#x3D; The format was successfully recorded or the recording process failed.    3 &#x3D; The format was recorded and encoded successful and the user can download the format.    4 &#x3D; The recording or encoding process produced errors. The user cannot download the format.    5 &#x3D; The user has deleted the format. (optional)
     * @param  bool $remove_deleted_telecasts When set, deleted telecasts (and records) are removed from result set.    The default value is true. (optional)
     * @param  \Swagger\Client\Model\RequestSearchTextScope $search_text_scope The scope defines the kind of the text search.    The default value is: 1    Values:1 &#x3D; search in all texts    2 &#x3D; search in title and subtitle (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    category    episode    random    startdate    subcategory    subtitle    title    tvstationposition    year    Default sorting:    +startdate (optional)
     * @param  int[] $star_ids A comma-separated list of star identifiers. (optional)
     * @param  string[] $tags A comma-separated list of tag keys.    Values:    record:guard &#x3D; The record was adjusted by the guard.    record:manual &#x3D; The record was created manually.    record:resume:0 &#x3D; The record was partially seen and can be resumed at the last position. The record was seen with ad.    record:resume:1 &#x3D; The record was partially seen and can be resumed at the last position. The record was seen without ad.    record:seen &#x3D; The record was seen / downloaded. (optional)
     * @param  int[] $telecast_ids A comma-separated list of telecast identifiers. (optional)
     * @param  \Swagger\Client\Model\RequestTimeBlock $time_block A time block selects telecasts of one time range.    Values    1 &#x3D; telecasts that start between 06:00 and 12:00, contains also the telecast that runs at 06:00    2 &#x3D; telecasts that start between 06:00 and 12:00    3 &#x3D; telecasts that start between 12:00 and 18:00    4 &#x3D; telecasts that start between 18:00 and 00:00    5 &#x3D; telecasts that start between 00:00 and 06:00    6 &#x3D; telecasts that are running currently, one telecast per TV station    7 &#x3D; telecasts that start after the currently running telecasts, one telecast per TV station    8 &#x3D; telecasts that start between 20:15 and 20:30    9 &#x3D; telecasts that start after 22:15 (optional)
     * @param  \Swagger\Client\Model\RequestTimeBlock[] $time_blocks A list of time blocks that selects telecasts of one time range.    Values:    1 &#x3D; telecasts that start between 06:00 and 12:00, contains also the telecast that runs at 06:00    2 &#x3D; telecasts that start between 06:00 and 12:00    3 &#x3D; telecasts that start between 12:00 and 18:00    4 &#x3D; telecasts that start between 18:00 and 00:00    5 &#x3D; telecasts that start between 00:00 and 06:00    6 &#x3D; telecasts that are running currently, one telecast per TV station    7 &#x3D; telecasts that start after the currently running telecasts, one telecast per TV station    8 &#x3D; telecasts that start between 20:15 and 20:30    9 &#x3D; telecasts that start after 22:15    6 + 7 must be used exclusively, all others can be combined. (optional)
     * @param  int[] $tv_categories A comma-separated list of TV category identifiers. (optional)
     * @param  int[] $tv_stations A comma-separated list of TV station identifiers. (optional)
     * @param  int[] $tv_sub_categories A comma-separated list of TV sub category identifiers. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseRecordOperation[]
     */
    public function v3RecordsDelete($ad_free_available = null, $channels = null, $day_of_weeks = null, $editorial_telecast_list_ids = null, $exact_title = null, $exact_titles = null, $excluded_telecast_ids = null, $excluded_tv_stations = null, $exclude_repeated_broadcasts = null, $fields = '["adfreeavailable, adfreelength, channels, channels.id, channels.name, createdate, defect.adcut.availablelength, defect.adcut.expectedlength, defect.adcut.istelecastendset, defect.adcut.istelecaststartset, defect.encoding.followuptime.availablelength, defect.encoding.followuptime.expectedlength, defect.encoding.leadtime.availablelength, defect.encoding.leadtime.expectedlength, defect.encoding.telecast.availablelength, defect.encoding.telecast.expectedlength, enddate, formats, formats.cutvideosize, formats.recordformat.id, formats.recordformat.name, formats.recordstate.id, formats.recordstate.name, formats.recordstatemessage, formats.retentiondate, formats.uncutvideosize, isadcutenabled, playlists.id, playlists.name, resumepositions, resumepositions.adfree, resumepositions.default, startdate, tags.key, tags.value, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid, updatedate"]', $fsk = null, $is_highlight = null, $last_update_date = null, $limit = null, $max_end_date = null, $max_start_date = null, $min_end_date = null, $min_start_date = null, $min_start_time_hour = null, $min_start_time_hour = null, $min_start_time_minute = null, $min_start_time_minute = null, $no_paging_header = null, $offset = null, $q = null, $record_formats = null, $record_states = null, $remove_deleted_telecasts = null, $search_text_scope = null, $sort = null, $star_ids = null, $tags = null, $telecast_ids = null, $time_block = null, $time_blocks = null, $tv_categories = null, $tv_stations = null, $tv_sub_categories = null)
    {
        list($response) = $this->v3RecordsDeleteWithHttpInfo($ad_free_available, $channels, $day_of_weeks, $editorial_telecast_list_ids, $exact_title, $exact_titles, $excluded_telecast_ids, $excluded_tv_stations, $exclude_repeated_broadcasts, $fields, $fsk, $is_highlight, $last_update_date, $limit, $max_end_date, $max_start_date, $min_end_date, $min_start_date, $min_start_time_hour, $min_start_time_hour, $min_start_time_minute, $min_start_time_minute, $no_paging_header, $offset, $q, $record_formats, $record_states, $remove_deleted_telecasts, $search_text_scope, $sort, $star_ids, $tags, $telecast_ids, $time_block, $time_blocks, $tv_categories, $tv_stations, $tv_sub_categories);
        return $response;
    }

    /**
     * Operation v3RecordsDeleteWithHttpInfo
     *
     * Deletes the records that match the given filter.
     *
     * @param  bool $ad_free_available Determines wether the ad cut list is available. (optional)
     * @param  int[] $channels A comma-separated list of TV channel identifiers. (optional)
     * @param  \Swagger\Client\Model\DayOfWeek[] $day_of_weeks Selects only telecast whose start date matches the given day of weeks. The start date comparison is based on local time.    Values:    0 &#x3D; Sunday    1 &#x3D; Monday    2 &#x3D; Tuesday    3 &#x3D; Wednesday    4 &#x3D; Thursday    5 &#x3D; Friday    6 &#x3D; Saturday (optional)
     * @param  string[] $editorial_telecast_list_ids Selects telecasts from an editorial maintained list.    Values:    stayathomeeducation    stayathomehighlights    stayathomekids    xmas2019 (optional)
     * @param  string $exact_title Selects only telecasts whose title matches exactly (but case insensitive) the given value. (optional)
     * @param  string[] $exact_titles Selects only telecasts whose title matches exactly (but case insensitive) one of the given values.    When the parameter \&quot;exactTitle\&quot; is given too, the value of this parameter is ignored.    The titles are separated by a comma. Commas inside a title are escaped with \&quot;\\,\&quot; (1 back slash, 1 commma).    Example:    Title 1: Tatort    Title 2: Im Himmel, unter der Erde    Value: Tatort,Im Himmel\\, unter der Erde (optional)
     * @param  int[] $excluded_telecast_ids A comma-separated list of telecast identifiers that will be ignored even if the other filter criterias would match these telecasts. (optional)
     * @param  int[] $excluded_tv_stations A comma-separated list of TV station identifiers that must not match. (optional)
     * @param  bool $exclude_repeated_broadcasts (optional)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;telecastid\&quot; is always transmitted.    _The allowed field values:_    adfreeavailable,    adfreelength,    channels,    channels.id,    channels.name,    createdate,    defect.adcut.availablelength,    defect.adcut.expectedlength,    defect.adcut.istelecastendset,    defect.adcut.istelecaststartset,    defect.encoding.followuptime.availablelength,    defect.encoding.followuptime.expectedlength,    defect.encoding.leadtime.availablelength,    defect.encoding.leadtime.expectedlength,    defect.encoding.telecast.availablelength,    defect.encoding.telecast.expectedlength,    enddate,    formats,    formats.cutvideosize,    formats.recordformat.id,    formats.recordformat.name,    formats.recordstate.id,    formats.recordstate.name,    formats.recordstatemessage,    formats.retentiondate,    formats.uncutvideosize,    isadcutenabled,    playlists.id,    playlists.name,    resumepositions,    resumepositions.adfree,    resumepositions.default,    startdate,    tags.key,    tags.value,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid,    updatedate (optional, default to ["adfreeavailable, adfreelength, channels, channels.id, channels.name, createdate, defect.adcut.availablelength, defect.adcut.expectedlength, defect.adcut.istelecastendset, defect.adcut.istelecaststartset, defect.encoding.followuptime.availablelength, defect.encoding.followuptime.expectedlength, defect.encoding.leadtime.availablelength, defect.encoding.leadtime.expectedlength, defect.encoding.telecast.availablelength, defect.encoding.telecast.expectedlength, enddate, formats, formats.cutvideosize, formats.recordformat.id, formats.recordformat.name, formats.recordstate.id, formats.recordstate.name, formats.recordstatemessage, formats.retentiondate, formats.uncutvideosize, isadcutenabled, playlists.id, playlists.name, resumepositions, resumepositions.adfree, resumepositions.default, startdate, tags.key, tags.value, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid, updatedate"])
     * @param  int[] $fsk Selects only telecasts whose fsk matches the given value.    Values:    0 &#x3D; Includes all ages from 0 to 5.    6 &#x3D; Includes all ages from 6 to 11.    12 &#x3D; Includes all ages from 12 to 15.    16 &#x3D; Includes all ages from 16 to 17.    18 &#x3D; Includes all ages from 18 and above. (optional)
     * @param  bool $is_highlight Determines whether the telecast must be an highlight or not. (optional)
     * @param  \DateTime $last_update_date Selects only records that was updated (finished, ad free available, changed record dates, ...) / created after the given date.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  int $limit Sets the maximum number of items in result set.    The default value: 50.    The maximum allowed value: 5000. (optional)
     * @param  \DateTime $max_end_date The maximum end date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  \DateTime $max_start_date The maximum start date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  \DateTime $min_end_date The minimum end date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  \DateTime $min_start_date The minimum start date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  int $min_start_time_hour (optional)
     * @param  int $min_start_time_hour (optional)
     * @param  int $min_start_time_minute (optional)
     * @param  int $min_start_time_minute (optional)
     * @param  bool $no_paging_header By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values (optional)
     * @param  int $offset Sets the number of data items that are skipped in the result set.    The default value: 0. (optional)
     * @param  string $q The search text used for a text search. (optional)
     * @param  \Swagger\Client\Model\RequestRecordFormat[] $record_formats A comma-separated list of record formats. Selects only telecasts that are available in the given formats.    Values:    4 &#x3D; Mobile    5 &#x3D; SD    6 &#x3D; HD (optional)
     * @param  \Swagger\Client\Model\RequestRecordState[] $record_states A comma-separated list of record states.    Values:    1 &#x3D; The user has requested the format.    2 &#x3D; The format was successfully recorded or the recording process failed.    3 &#x3D; The format was recorded and encoded successful and the user can download the format.    4 &#x3D; The recording or encoding process produced errors. The user cannot download the format.    5 &#x3D; The user has deleted the format. (optional)
     * @param  bool $remove_deleted_telecasts When set, deleted telecasts (and records) are removed from result set.    The default value is true. (optional)
     * @param  \Swagger\Client\Model\RequestSearchTextScope $search_text_scope The scope defines the kind of the text search.    The default value is: 1    Values:1 &#x3D; search in all texts    2 &#x3D; search in title and subtitle (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    category    episode    random    startdate    subcategory    subtitle    title    tvstationposition    year    Default sorting:    +startdate (optional)
     * @param  int[] $star_ids A comma-separated list of star identifiers. (optional)
     * @param  string[] $tags A comma-separated list of tag keys.    Values:    record:guard &#x3D; The record was adjusted by the guard.    record:manual &#x3D; The record was created manually.    record:resume:0 &#x3D; The record was partially seen and can be resumed at the last position. The record was seen with ad.    record:resume:1 &#x3D; The record was partially seen and can be resumed at the last position. The record was seen without ad.    record:seen &#x3D; The record was seen / downloaded. (optional)
     * @param  int[] $telecast_ids A comma-separated list of telecast identifiers. (optional)
     * @param  \Swagger\Client\Model\RequestTimeBlock $time_block A time block selects telecasts of one time range.    Values    1 &#x3D; telecasts that start between 06:00 and 12:00, contains also the telecast that runs at 06:00    2 &#x3D; telecasts that start between 06:00 and 12:00    3 &#x3D; telecasts that start between 12:00 and 18:00    4 &#x3D; telecasts that start between 18:00 and 00:00    5 &#x3D; telecasts that start between 00:00 and 06:00    6 &#x3D; telecasts that are running currently, one telecast per TV station    7 &#x3D; telecasts that start after the currently running telecasts, one telecast per TV station    8 &#x3D; telecasts that start between 20:15 and 20:30    9 &#x3D; telecasts that start after 22:15 (optional)
     * @param  \Swagger\Client\Model\RequestTimeBlock[] $time_blocks A list of time blocks that selects telecasts of one time range.    Values:    1 &#x3D; telecasts that start between 06:00 and 12:00, contains also the telecast that runs at 06:00    2 &#x3D; telecasts that start between 06:00 and 12:00    3 &#x3D; telecasts that start between 12:00 and 18:00    4 &#x3D; telecasts that start between 18:00 and 00:00    5 &#x3D; telecasts that start between 00:00 and 06:00    6 &#x3D; telecasts that are running currently, one telecast per TV station    7 &#x3D; telecasts that start after the currently running telecasts, one telecast per TV station    8 &#x3D; telecasts that start between 20:15 and 20:30    9 &#x3D; telecasts that start after 22:15    6 + 7 must be used exclusively, all others can be combined. (optional)
     * @param  int[] $tv_categories A comma-separated list of TV category identifiers. (optional)
     * @param  int[] $tv_stations A comma-separated list of TV station identifiers. (optional)
     * @param  int[] $tv_sub_categories A comma-separated list of TV sub category identifiers. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseRecordOperation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v3RecordsDeleteWithHttpInfo($ad_free_available = null, $channels = null, $day_of_weeks = null, $editorial_telecast_list_ids = null, $exact_title = null, $exact_titles = null, $excluded_telecast_ids = null, $excluded_tv_stations = null, $exclude_repeated_broadcasts = null, $fields = '["adfreeavailable, adfreelength, channels, channels.id, channels.name, createdate, defect.adcut.availablelength, defect.adcut.expectedlength, defect.adcut.istelecastendset, defect.adcut.istelecaststartset, defect.encoding.followuptime.availablelength, defect.encoding.followuptime.expectedlength, defect.encoding.leadtime.availablelength, defect.encoding.leadtime.expectedlength, defect.encoding.telecast.availablelength, defect.encoding.telecast.expectedlength, enddate, formats, formats.cutvideosize, formats.recordformat.id, formats.recordformat.name, formats.recordstate.id, formats.recordstate.name, formats.recordstatemessage, formats.retentiondate, formats.uncutvideosize, isadcutenabled, playlists.id, playlists.name, resumepositions, resumepositions.adfree, resumepositions.default, startdate, tags.key, tags.value, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid, updatedate"]', $fsk = null, $is_highlight = null, $last_update_date = null, $limit = null, $max_end_date = null, $max_start_date = null, $min_end_date = null, $min_start_date = null, $min_start_time_hour = null, $min_start_time_hour = null, $min_start_time_minute = null, $min_start_time_minute = null, $no_paging_header = null, $offset = null, $q = null, $record_formats = null, $record_states = null, $remove_deleted_telecasts = null, $search_text_scope = null, $sort = null, $star_ids = null, $tags = null, $telecast_ids = null, $time_block = null, $time_blocks = null, $tv_categories = null, $tv_stations = null, $tv_sub_categories = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseRecordOperation[]';
        $request = $this->v3RecordsDeleteRequest($ad_free_available, $channels, $day_of_weeks, $editorial_telecast_list_ids, $exact_title, $exact_titles, $excluded_telecast_ids, $excluded_tv_stations, $exclude_repeated_broadcasts, $fields, $fsk, $is_highlight, $last_update_date, $limit, $max_end_date, $max_start_date, $min_end_date, $min_start_date, $min_start_time_hour, $min_start_time_hour, $min_start_time_minute, $min_start_time_minute, $no_paging_header, $offset, $q, $record_formats, $record_states, $remove_deleted_telecasts, $search_text_scope, $sort, $star_ids, $tags, $telecast_ids, $time_block, $time_blocks, $tv_categories, $tv_stations, $tv_sub_categories);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseRecordOperation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v3RecordsDeleteAsync
     *
     * Deletes the records that match the given filter.
     *
     * @param  bool $ad_free_available Determines wether the ad cut list is available. (optional)
     * @param  int[] $channels A comma-separated list of TV channel identifiers. (optional)
     * @param  \Swagger\Client\Model\DayOfWeek[] $day_of_weeks Selects only telecast whose start date matches the given day of weeks. The start date comparison is based on local time.    Values:    0 &#x3D; Sunday    1 &#x3D; Monday    2 &#x3D; Tuesday    3 &#x3D; Wednesday    4 &#x3D; Thursday    5 &#x3D; Friday    6 &#x3D; Saturday (optional)
     * @param  string[] $editorial_telecast_list_ids Selects telecasts from an editorial maintained list.    Values:    stayathomeeducation    stayathomehighlights    stayathomekids    xmas2019 (optional)
     * @param  string $exact_title Selects only telecasts whose title matches exactly (but case insensitive) the given value. (optional)
     * @param  string[] $exact_titles Selects only telecasts whose title matches exactly (but case insensitive) one of the given values.    When the parameter \&quot;exactTitle\&quot; is given too, the value of this parameter is ignored.    The titles are separated by a comma. Commas inside a title are escaped with \&quot;\\,\&quot; (1 back slash, 1 commma).    Example:    Title 1: Tatort    Title 2: Im Himmel, unter der Erde    Value: Tatort,Im Himmel\\, unter der Erde (optional)
     * @param  int[] $excluded_telecast_ids A comma-separated list of telecast identifiers that will be ignored even if the other filter criterias would match these telecasts. (optional)
     * @param  int[] $excluded_tv_stations A comma-separated list of TV station identifiers that must not match. (optional)
     * @param  bool $exclude_repeated_broadcasts (optional)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;telecastid\&quot; is always transmitted.    _The allowed field values:_    adfreeavailable,    adfreelength,    channels,    channels.id,    channels.name,    createdate,    defect.adcut.availablelength,    defect.adcut.expectedlength,    defect.adcut.istelecastendset,    defect.adcut.istelecaststartset,    defect.encoding.followuptime.availablelength,    defect.encoding.followuptime.expectedlength,    defect.encoding.leadtime.availablelength,    defect.encoding.leadtime.expectedlength,    defect.encoding.telecast.availablelength,    defect.encoding.telecast.expectedlength,    enddate,    formats,    formats.cutvideosize,    formats.recordformat.id,    formats.recordformat.name,    formats.recordstate.id,    formats.recordstate.name,    formats.recordstatemessage,    formats.retentiondate,    formats.uncutvideosize,    isadcutenabled,    playlists.id,    playlists.name,    resumepositions,    resumepositions.adfree,    resumepositions.default,    startdate,    tags.key,    tags.value,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid,    updatedate (optional, default to ["adfreeavailable, adfreelength, channels, channels.id, channels.name, createdate, defect.adcut.availablelength, defect.adcut.expectedlength, defect.adcut.istelecastendset, defect.adcut.istelecaststartset, defect.encoding.followuptime.availablelength, defect.encoding.followuptime.expectedlength, defect.encoding.leadtime.availablelength, defect.encoding.leadtime.expectedlength, defect.encoding.telecast.availablelength, defect.encoding.telecast.expectedlength, enddate, formats, formats.cutvideosize, formats.recordformat.id, formats.recordformat.name, formats.recordstate.id, formats.recordstate.name, formats.recordstatemessage, formats.retentiondate, formats.uncutvideosize, isadcutenabled, playlists.id, playlists.name, resumepositions, resumepositions.adfree, resumepositions.default, startdate, tags.key, tags.value, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid, updatedate"])
     * @param  int[] $fsk Selects only telecasts whose fsk matches the given value.    Values:    0 &#x3D; Includes all ages from 0 to 5.    6 &#x3D; Includes all ages from 6 to 11.    12 &#x3D; Includes all ages from 12 to 15.    16 &#x3D; Includes all ages from 16 to 17.    18 &#x3D; Includes all ages from 18 and above. (optional)
     * @param  bool $is_highlight Determines whether the telecast must be an highlight or not. (optional)
     * @param  \DateTime $last_update_date Selects only records that was updated (finished, ad free available, changed record dates, ...) / created after the given date.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  int $limit Sets the maximum number of items in result set.    The default value: 50.    The maximum allowed value: 5000. (optional)
     * @param  \DateTime $max_end_date The maximum end date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  \DateTime $max_start_date The maximum start date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  \DateTime $min_end_date The minimum end date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  \DateTime $min_start_date The minimum start date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  int $min_start_time_hour (optional)
     * @param  int $min_start_time_hour (optional)
     * @param  int $min_start_time_minute (optional)
     * @param  int $min_start_time_minute (optional)
     * @param  bool $no_paging_header By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values (optional)
     * @param  int $offset Sets the number of data items that are skipped in the result set.    The default value: 0. (optional)
     * @param  string $q The search text used for a text search. (optional)
     * @param  \Swagger\Client\Model\RequestRecordFormat[] $record_formats A comma-separated list of record formats. Selects only telecasts that are available in the given formats.    Values:    4 &#x3D; Mobile    5 &#x3D; SD    6 &#x3D; HD (optional)
     * @param  \Swagger\Client\Model\RequestRecordState[] $record_states A comma-separated list of record states.    Values:    1 &#x3D; The user has requested the format.    2 &#x3D; The format was successfully recorded or the recording process failed.    3 &#x3D; The format was recorded and encoded successful and the user can download the format.    4 &#x3D; The recording or encoding process produced errors. The user cannot download the format.    5 &#x3D; The user has deleted the format. (optional)
     * @param  bool $remove_deleted_telecasts When set, deleted telecasts (and records) are removed from result set.    The default value is true. (optional)
     * @param  \Swagger\Client\Model\RequestSearchTextScope $search_text_scope The scope defines the kind of the text search.    The default value is: 1    Values:1 &#x3D; search in all texts    2 &#x3D; search in title and subtitle (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    category    episode    random    startdate    subcategory    subtitle    title    tvstationposition    year    Default sorting:    +startdate (optional)
     * @param  int[] $star_ids A comma-separated list of star identifiers. (optional)
     * @param  string[] $tags A comma-separated list of tag keys.    Values:    record:guard &#x3D; The record was adjusted by the guard.    record:manual &#x3D; The record was created manually.    record:resume:0 &#x3D; The record was partially seen and can be resumed at the last position. The record was seen with ad.    record:resume:1 &#x3D; The record was partially seen and can be resumed at the last position. The record was seen without ad.    record:seen &#x3D; The record was seen / downloaded. (optional)
     * @param  int[] $telecast_ids A comma-separated list of telecast identifiers. (optional)
     * @param  \Swagger\Client\Model\RequestTimeBlock $time_block A time block selects telecasts of one time range.    Values    1 &#x3D; telecasts that start between 06:00 and 12:00, contains also the telecast that runs at 06:00    2 &#x3D; telecasts that start between 06:00 and 12:00    3 &#x3D; telecasts that start between 12:00 and 18:00    4 &#x3D; telecasts that start between 18:00 and 00:00    5 &#x3D; telecasts that start between 00:00 and 06:00    6 &#x3D; telecasts that are running currently, one telecast per TV station    7 &#x3D; telecasts that start after the currently running telecasts, one telecast per TV station    8 &#x3D; telecasts that start between 20:15 and 20:30    9 &#x3D; telecasts that start after 22:15 (optional)
     * @param  \Swagger\Client\Model\RequestTimeBlock[] $time_blocks A list of time blocks that selects telecasts of one time range.    Values:    1 &#x3D; telecasts that start between 06:00 and 12:00, contains also the telecast that runs at 06:00    2 &#x3D; telecasts that start between 06:00 and 12:00    3 &#x3D; telecasts that start between 12:00 and 18:00    4 &#x3D; telecasts that start between 18:00 and 00:00    5 &#x3D; telecasts that start between 00:00 and 06:00    6 &#x3D; telecasts that are running currently, one telecast per TV station    7 &#x3D; telecasts that start after the currently running telecasts, one telecast per TV station    8 &#x3D; telecasts that start between 20:15 and 20:30    9 &#x3D; telecasts that start after 22:15    6 + 7 must be used exclusively, all others can be combined. (optional)
     * @param  int[] $tv_categories A comma-separated list of TV category identifiers. (optional)
     * @param  int[] $tv_stations A comma-separated list of TV station identifiers. (optional)
     * @param  int[] $tv_sub_categories A comma-separated list of TV sub category identifiers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3RecordsDeleteAsync($ad_free_available = null, $channels = null, $day_of_weeks = null, $editorial_telecast_list_ids = null, $exact_title = null, $exact_titles = null, $excluded_telecast_ids = null, $excluded_tv_stations = null, $exclude_repeated_broadcasts = null, $fields = '["adfreeavailable, adfreelength, channels, channels.id, channels.name, createdate, defect.adcut.availablelength, defect.adcut.expectedlength, defect.adcut.istelecastendset, defect.adcut.istelecaststartset, defect.encoding.followuptime.availablelength, defect.encoding.followuptime.expectedlength, defect.encoding.leadtime.availablelength, defect.encoding.leadtime.expectedlength, defect.encoding.telecast.availablelength, defect.encoding.telecast.expectedlength, enddate, formats, formats.cutvideosize, formats.recordformat.id, formats.recordformat.name, formats.recordstate.id, formats.recordstate.name, formats.recordstatemessage, formats.retentiondate, formats.uncutvideosize, isadcutenabled, playlists.id, playlists.name, resumepositions, resumepositions.adfree, resumepositions.default, startdate, tags.key, tags.value, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid, updatedate"]', $fsk = null, $is_highlight = null, $last_update_date = null, $limit = null, $max_end_date = null, $max_start_date = null, $min_end_date = null, $min_start_date = null, $min_start_time_hour = null, $min_start_time_hour = null, $min_start_time_minute = null, $min_start_time_minute = null, $no_paging_header = null, $offset = null, $q = null, $record_formats = null, $record_states = null, $remove_deleted_telecasts = null, $search_text_scope = null, $sort = null, $star_ids = null, $tags = null, $telecast_ids = null, $time_block = null, $time_blocks = null, $tv_categories = null, $tv_stations = null, $tv_sub_categories = null)
    {
        return $this->v3RecordsDeleteAsyncWithHttpInfo($ad_free_available, $channels, $day_of_weeks, $editorial_telecast_list_ids, $exact_title, $exact_titles, $excluded_telecast_ids, $excluded_tv_stations, $exclude_repeated_broadcasts, $fields, $fsk, $is_highlight, $last_update_date, $limit, $max_end_date, $max_start_date, $min_end_date, $min_start_date, $min_start_time_hour, $min_start_time_hour, $min_start_time_minute, $min_start_time_minute, $no_paging_header, $offset, $q, $record_formats, $record_states, $remove_deleted_telecasts, $search_text_scope, $sort, $star_ids, $tags, $telecast_ids, $time_block, $time_blocks, $tv_categories, $tv_stations, $tv_sub_categories)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3RecordsDeleteAsyncWithHttpInfo
     *
     * Deletes the records that match the given filter.
     *
     * @param  bool $ad_free_available Determines wether the ad cut list is available. (optional)
     * @param  int[] $channels A comma-separated list of TV channel identifiers. (optional)
     * @param  \Swagger\Client\Model\DayOfWeek[] $day_of_weeks Selects only telecast whose start date matches the given day of weeks. The start date comparison is based on local time.    Values:    0 &#x3D; Sunday    1 &#x3D; Monday    2 &#x3D; Tuesday    3 &#x3D; Wednesday    4 &#x3D; Thursday    5 &#x3D; Friday    6 &#x3D; Saturday (optional)
     * @param  string[] $editorial_telecast_list_ids Selects telecasts from an editorial maintained list.    Values:    stayathomeeducation    stayathomehighlights    stayathomekids    xmas2019 (optional)
     * @param  string $exact_title Selects only telecasts whose title matches exactly (but case insensitive) the given value. (optional)
     * @param  string[] $exact_titles Selects only telecasts whose title matches exactly (but case insensitive) one of the given values.    When the parameter \&quot;exactTitle\&quot; is given too, the value of this parameter is ignored.    The titles are separated by a comma. Commas inside a title are escaped with \&quot;\\,\&quot; (1 back slash, 1 commma).    Example:    Title 1: Tatort    Title 2: Im Himmel, unter der Erde    Value: Tatort,Im Himmel\\, unter der Erde (optional)
     * @param  int[] $excluded_telecast_ids A comma-separated list of telecast identifiers that will be ignored even if the other filter criterias would match these telecasts. (optional)
     * @param  int[] $excluded_tv_stations A comma-separated list of TV station identifiers that must not match. (optional)
     * @param  bool $exclude_repeated_broadcasts (optional)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;telecastid\&quot; is always transmitted.    _The allowed field values:_    adfreeavailable,    adfreelength,    channels,    channels.id,    channels.name,    createdate,    defect.adcut.availablelength,    defect.adcut.expectedlength,    defect.adcut.istelecastendset,    defect.adcut.istelecaststartset,    defect.encoding.followuptime.availablelength,    defect.encoding.followuptime.expectedlength,    defect.encoding.leadtime.availablelength,    defect.encoding.leadtime.expectedlength,    defect.encoding.telecast.availablelength,    defect.encoding.telecast.expectedlength,    enddate,    formats,    formats.cutvideosize,    formats.recordformat.id,    formats.recordformat.name,    formats.recordstate.id,    formats.recordstate.name,    formats.recordstatemessage,    formats.retentiondate,    formats.uncutvideosize,    isadcutenabled,    playlists.id,    playlists.name,    resumepositions,    resumepositions.adfree,    resumepositions.default,    startdate,    tags.key,    tags.value,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid,    updatedate (optional, default to ["adfreeavailable, adfreelength, channels, channels.id, channels.name, createdate, defect.adcut.availablelength, defect.adcut.expectedlength, defect.adcut.istelecastendset, defect.adcut.istelecaststartset, defect.encoding.followuptime.availablelength, defect.encoding.followuptime.expectedlength, defect.encoding.leadtime.availablelength, defect.encoding.leadtime.expectedlength, defect.encoding.telecast.availablelength, defect.encoding.telecast.expectedlength, enddate, formats, formats.cutvideosize, formats.recordformat.id, formats.recordformat.name, formats.recordstate.id, formats.recordstate.name, formats.recordstatemessage, formats.retentiondate, formats.uncutvideosize, isadcutenabled, playlists.id, playlists.name, resumepositions, resumepositions.adfree, resumepositions.default, startdate, tags.key, tags.value, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid, updatedate"])
     * @param  int[] $fsk Selects only telecasts whose fsk matches the given value.    Values:    0 &#x3D; Includes all ages from 0 to 5.    6 &#x3D; Includes all ages from 6 to 11.    12 &#x3D; Includes all ages from 12 to 15.    16 &#x3D; Includes all ages from 16 to 17.    18 &#x3D; Includes all ages from 18 and above. (optional)
     * @param  bool $is_highlight Determines whether the telecast must be an highlight or not. (optional)
     * @param  \DateTime $last_update_date Selects only records that was updated (finished, ad free available, changed record dates, ...) / created after the given date.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  int $limit Sets the maximum number of items in result set.    The default value: 50.    The maximum allowed value: 5000. (optional)
     * @param  \DateTime $max_end_date The maximum end date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  \DateTime $max_start_date The maximum start date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  \DateTime $min_end_date The minimum end date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  \DateTime $min_start_date The minimum start date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  int $min_start_time_hour (optional)
     * @param  int $min_start_time_hour (optional)
     * @param  int $min_start_time_minute (optional)
     * @param  int $min_start_time_minute (optional)
     * @param  bool $no_paging_header By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values (optional)
     * @param  int $offset Sets the number of data items that are skipped in the result set.    The default value: 0. (optional)
     * @param  string $q The search text used for a text search. (optional)
     * @param  \Swagger\Client\Model\RequestRecordFormat[] $record_formats A comma-separated list of record formats. Selects only telecasts that are available in the given formats.    Values:    4 &#x3D; Mobile    5 &#x3D; SD    6 &#x3D; HD (optional)
     * @param  \Swagger\Client\Model\RequestRecordState[] $record_states A comma-separated list of record states.    Values:    1 &#x3D; The user has requested the format.    2 &#x3D; The format was successfully recorded or the recording process failed.    3 &#x3D; The format was recorded and encoded successful and the user can download the format.    4 &#x3D; The recording or encoding process produced errors. The user cannot download the format.    5 &#x3D; The user has deleted the format. (optional)
     * @param  bool $remove_deleted_telecasts When set, deleted telecasts (and records) are removed from result set.    The default value is true. (optional)
     * @param  \Swagger\Client\Model\RequestSearchTextScope $search_text_scope The scope defines the kind of the text search.    The default value is: 1    Values:1 &#x3D; search in all texts    2 &#x3D; search in title and subtitle (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    category    episode    random    startdate    subcategory    subtitle    title    tvstationposition    year    Default sorting:    +startdate (optional)
     * @param  int[] $star_ids A comma-separated list of star identifiers. (optional)
     * @param  string[] $tags A comma-separated list of tag keys.    Values:    record:guard &#x3D; The record was adjusted by the guard.    record:manual &#x3D; The record was created manually.    record:resume:0 &#x3D; The record was partially seen and can be resumed at the last position. The record was seen with ad.    record:resume:1 &#x3D; The record was partially seen and can be resumed at the last position. The record was seen without ad.    record:seen &#x3D; The record was seen / downloaded. (optional)
     * @param  int[] $telecast_ids A comma-separated list of telecast identifiers. (optional)
     * @param  \Swagger\Client\Model\RequestTimeBlock $time_block A time block selects telecasts of one time range.    Values    1 &#x3D; telecasts that start between 06:00 and 12:00, contains also the telecast that runs at 06:00    2 &#x3D; telecasts that start between 06:00 and 12:00    3 &#x3D; telecasts that start between 12:00 and 18:00    4 &#x3D; telecasts that start between 18:00 and 00:00    5 &#x3D; telecasts that start between 00:00 and 06:00    6 &#x3D; telecasts that are running currently, one telecast per TV station    7 &#x3D; telecasts that start after the currently running telecasts, one telecast per TV station    8 &#x3D; telecasts that start between 20:15 and 20:30    9 &#x3D; telecasts that start after 22:15 (optional)
     * @param  \Swagger\Client\Model\RequestTimeBlock[] $time_blocks A list of time blocks that selects telecasts of one time range.    Values:    1 &#x3D; telecasts that start between 06:00 and 12:00, contains also the telecast that runs at 06:00    2 &#x3D; telecasts that start between 06:00 and 12:00    3 &#x3D; telecasts that start between 12:00 and 18:00    4 &#x3D; telecasts that start between 18:00 and 00:00    5 &#x3D; telecasts that start between 00:00 and 06:00    6 &#x3D; telecasts that are running currently, one telecast per TV station    7 &#x3D; telecasts that start after the currently running telecasts, one telecast per TV station    8 &#x3D; telecasts that start between 20:15 and 20:30    9 &#x3D; telecasts that start after 22:15    6 + 7 must be used exclusively, all others can be combined. (optional)
     * @param  int[] $tv_categories A comma-separated list of TV category identifiers. (optional)
     * @param  int[] $tv_stations A comma-separated list of TV station identifiers. (optional)
     * @param  int[] $tv_sub_categories A comma-separated list of TV sub category identifiers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3RecordsDeleteAsyncWithHttpInfo($ad_free_available = null, $channels = null, $day_of_weeks = null, $editorial_telecast_list_ids = null, $exact_title = null, $exact_titles = null, $excluded_telecast_ids = null, $excluded_tv_stations = null, $exclude_repeated_broadcasts = null, $fields = '["adfreeavailable, adfreelength, channels, channels.id, channels.name, createdate, defect.adcut.availablelength, defect.adcut.expectedlength, defect.adcut.istelecastendset, defect.adcut.istelecaststartset, defect.encoding.followuptime.availablelength, defect.encoding.followuptime.expectedlength, defect.encoding.leadtime.availablelength, defect.encoding.leadtime.expectedlength, defect.encoding.telecast.availablelength, defect.encoding.telecast.expectedlength, enddate, formats, formats.cutvideosize, formats.recordformat.id, formats.recordformat.name, formats.recordstate.id, formats.recordstate.name, formats.recordstatemessage, formats.retentiondate, formats.uncutvideosize, isadcutenabled, playlists.id, playlists.name, resumepositions, resumepositions.adfree, resumepositions.default, startdate, tags.key, tags.value, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid, updatedate"]', $fsk = null, $is_highlight = null, $last_update_date = null, $limit = null, $max_end_date = null, $max_start_date = null, $min_end_date = null, $min_start_date = null, $min_start_time_hour = null, $min_start_time_hour = null, $min_start_time_minute = null, $min_start_time_minute = null, $no_paging_header = null, $offset = null, $q = null, $record_formats = null, $record_states = null, $remove_deleted_telecasts = null, $search_text_scope = null, $sort = null, $star_ids = null, $tags = null, $telecast_ids = null, $time_block = null, $time_blocks = null, $tv_categories = null, $tv_stations = null, $tv_sub_categories = null)
    {
        $returnType = '\Swagger\Client\Model\ResponseRecordOperation[]';
        $request = $this->v3RecordsDeleteRequest($ad_free_available, $channels, $day_of_weeks, $editorial_telecast_list_ids, $exact_title, $exact_titles, $excluded_telecast_ids, $excluded_tv_stations, $exclude_repeated_broadcasts, $fields, $fsk, $is_highlight, $last_update_date, $limit, $max_end_date, $max_start_date, $min_end_date, $min_start_date, $min_start_time_hour, $min_start_time_hour, $min_start_time_minute, $min_start_time_minute, $no_paging_header, $offset, $q, $record_formats, $record_states, $remove_deleted_telecasts, $search_text_scope, $sort, $star_ids, $tags, $telecast_ids, $time_block, $time_blocks, $tv_categories, $tv_stations, $tv_sub_categories);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3RecordsDelete'
     *
     * @param  bool $ad_free_available Determines wether the ad cut list is available. (optional)
     * @param  int[] $channels A comma-separated list of TV channel identifiers. (optional)
     * @param  \Swagger\Client\Model\DayOfWeek[] $day_of_weeks Selects only telecast whose start date matches the given day of weeks. The start date comparison is based on local time.    Values:    0 &#x3D; Sunday    1 &#x3D; Monday    2 &#x3D; Tuesday    3 &#x3D; Wednesday    4 &#x3D; Thursday    5 &#x3D; Friday    6 &#x3D; Saturday (optional)
     * @param  string[] $editorial_telecast_list_ids Selects telecasts from an editorial maintained list.    Values:    stayathomeeducation    stayathomehighlights    stayathomekids    xmas2019 (optional)
     * @param  string $exact_title Selects only telecasts whose title matches exactly (but case insensitive) the given value. (optional)
     * @param  string[] $exact_titles Selects only telecasts whose title matches exactly (but case insensitive) one of the given values.    When the parameter \&quot;exactTitle\&quot; is given too, the value of this parameter is ignored.    The titles are separated by a comma. Commas inside a title are escaped with \&quot;\\,\&quot; (1 back slash, 1 commma).    Example:    Title 1: Tatort    Title 2: Im Himmel, unter der Erde    Value: Tatort,Im Himmel\\, unter der Erde (optional)
     * @param  int[] $excluded_telecast_ids A comma-separated list of telecast identifiers that will be ignored even if the other filter criterias would match these telecasts. (optional)
     * @param  int[] $excluded_tv_stations A comma-separated list of TV station identifiers that must not match. (optional)
     * @param  bool $exclude_repeated_broadcasts (optional)
     * @param  string[] $fields Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \&quot;telecastid\&quot; is always transmitted.    _The allowed field values:_    adfreeavailable,    adfreelength,    channels,    channels.id,    channels.name,    createdate,    defect.adcut.availablelength,    defect.adcut.expectedlength,    defect.adcut.istelecastendset,    defect.adcut.istelecaststartset,    defect.encoding.followuptime.availablelength,    defect.encoding.followuptime.expectedlength,    defect.encoding.leadtime.availablelength,    defect.encoding.leadtime.expectedlength,    defect.encoding.telecast.availablelength,    defect.encoding.telecast.expectedlength,    enddate,    formats,    formats.cutvideosize,    formats.recordformat.id,    formats.recordformat.name,    formats.recordstate.id,    formats.recordstate.name,    formats.recordstatemessage,    formats.retentiondate,    formats.uncutvideosize,    isadcutenabled,    playlists.id,    playlists.name,    resumepositions,    resumepositions.adfree,    resumepositions.default,    startdate,    tags.key,    tags.value,    telecast,    telecast.characterization,    telecast.commentator,    telecast.country,    telecast.createdate,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.guests,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.originaltitle,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid,    updatedate (optional, default to ["adfreeavailable, adfreelength, channels, channels.id, channels.name, createdate, defect.adcut.availablelength, defect.adcut.expectedlength, defect.adcut.istelecastendset, defect.adcut.istelecaststartset, defect.encoding.followuptime.availablelength, defect.encoding.followuptime.expectedlength, defect.encoding.leadtime.availablelength, defect.encoding.leadtime.expectedlength, defect.encoding.telecast.availablelength, defect.encoding.telecast.expectedlength, enddate, formats, formats.cutvideosize, formats.recordformat.id, formats.recordformat.name, formats.recordstate.id, formats.recordstate.name, formats.recordstatemessage, formats.retentiondate, formats.uncutvideosize, isadcutenabled, playlists.id, playlists.name, resumepositions, resumepositions.adfree, resumepositions.default, startdate, tags.key, tags.value, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid, updatedate"])
     * @param  int[] $fsk Selects only telecasts whose fsk matches the given value.    Values:    0 &#x3D; Includes all ages from 0 to 5.    6 &#x3D; Includes all ages from 6 to 11.    12 &#x3D; Includes all ages from 12 to 15.    16 &#x3D; Includes all ages from 16 to 17.    18 &#x3D; Includes all ages from 18 and above. (optional)
     * @param  bool $is_highlight Determines whether the telecast must be an highlight or not. (optional)
     * @param  \DateTime $last_update_date Selects only records that was updated (finished, ad free available, changed record dates, ...) / created after the given date.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  int $limit Sets the maximum number of items in result set.    The default value: 50.    The maximum allowed value: 5000. (optional)
     * @param  \DateTime $max_end_date The maximum end date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  \DateTime $max_start_date The maximum start date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  \DateTime $min_end_date The minimum end date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  \DateTime $min_start_date The minimum start date of the telecast.    Date format: 2015-03-20 12:30:00Z (optional)
     * @param  int $min_start_time_hour (optional)
     * @param  int $min_start_time_hour (optional)
     * @param  int $min_start_time_minute (optional)
     * @param  int $min_start_time_minute (optional)
     * @param  bool $no_paging_header By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values (optional)
     * @param  int $offset Sets the number of data items that are skipped in the result set.    The default value: 0. (optional)
     * @param  string $q The search text used for a text search. (optional)
     * @param  \Swagger\Client\Model\RequestRecordFormat[] $record_formats A comma-separated list of record formats. Selects only telecasts that are available in the given formats.    Values:    4 &#x3D; Mobile    5 &#x3D; SD    6 &#x3D; HD (optional)
     * @param  \Swagger\Client\Model\RequestRecordState[] $record_states A comma-separated list of record states.    Values:    1 &#x3D; The user has requested the format.    2 &#x3D; The format was successfully recorded or the recording process failed.    3 &#x3D; The format was recorded and encoded successful and the user can download the format.    4 &#x3D; The recording or encoding process produced errors. The user cannot download the format.    5 &#x3D; The user has deleted the format. (optional)
     * @param  bool $remove_deleted_telecasts When set, deleted telecasts (and records) are removed from result set.    The default value is true. (optional)
     * @param  \Swagger\Client\Model\RequestSearchTextScope $search_text_scope The scope defines the kind of the text search.    The default value is: 1    Values:1 &#x3D; search in all texts    2 &#x3D; search in title and subtitle (optional)
     * @param  \Swagger\Client\Model\SortDescription[] $sort Sets the sort properties. The values are comma-separated. To sort ascending add a \&quot;+\&quot; before the sort property, to sort descending add a \&quot;-\&quot; before the sort property.    When omitted, a default sorting is used.    Example: sort&#x3D;+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    category    episode    random    startdate    subcategory    subtitle    title    tvstationposition    year    Default sorting:    +startdate (optional)
     * @param  int[] $star_ids A comma-separated list of star identifiers. (optional)
     * @param  string[] $tags A comma-separated list of tag keys.    Values:    record:guard &#x3D; The record was adjusted by the guard.    record:manual &#x3D; The record was created manually.    record:resume:0 &#x3D; The record was partially seen and can be resumed at the last position. The record was seen with ad.    record:resume:1 &#x3D; The record was partially seen and can be resumed at the last position. The record was seen without ad.    record:seen &#x3D; The record was seen / downloaded. (optional)
     * @param  int[] $telecast_ids A comma-separated list of telecast identifiers. (optional)
     * @param  \Swagger\Client\Model\RequestTimeBlock $time_block A time block selects telecasts of one time range.    Values    1 &#x3D; telecasts that start between 06:00 and 12:00, contains also the telecast that runs at 06:00    2 &#x3D; telecasts that start between 06:00 and 12:00    3 &#x3D; telecasts that start between 12:00 and 18:00    4 &#x3D; telecasts that start between 18:00 and 00:00    5 &#x3D; telecasts that start between 00:00 and 06:00    6 &#x3D; telecasts that are running currently, one telecast per TV station    7 &#x3D; telecasts that start after the currently running telecasts, one telecast per TV station    8 &#x3D; telecasts that start between 20:15 and 20:30    9 &#x3D; telecasts that start after 22:15 (optional)
     * @param  \Swagger\Client\Model\RequestTimeBlock[] $time_blocks A list of time blocks that selects telecasts of one time range.    Values:    1 &#x3D; telecasts that start between 06:00 and 12:00, contains also the telecast that runs at 06:00    2 &#x3D; telecasts that start between 06:00 and 12:00    3 &#x3D; telecasts that start between 12:00 and 18:00    4 &#x3D; telecasts that start between 18:00 and 00:00    5 &#x3D; telecasts that start between 00:00 and 06:00    6 &#x3D; telecasts that are running currently, one telecast per TV station    7 &#x3D; telecasts that start after the currently running telecasts, one telecast per TV station    8 &#x3D; telecasts that start between 20:15 and 20:30    9 &#x3D; telecasts that start after 22:15    6 + 7 must be used exclusively, all others can be combined. (optional)
     * @param  int[] $tv_categories A comma-separated list of TV category identifiers. (optional)
     * @param  int[] $tv_stations A comma-separated list of TV station identifiers. (optional)
     * @param  int[] $tv_sub_categories A comma-separated list of TV sub category identifiers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3RecordsDeleteRequest($ad_free_available = null, $channels = null, $day_of_weeks = null, $editorial_telecast_list_ids = null, $exact_title = null, $exact_titles = null, $excluded_telecast_ids = null, $excluded_tv_stations = null, $exclude_repeated_broadcasts = null, $fields = '["adfreeavailable, adfreelength, channels, channels.id, channels.name, createdate, defect.adcut.availablelength, defect.adcut.expectedlength, defect.adcut.istelecastendset, defect.adcut.istelecaststartset, defect.encoding.followuptime.availablelength, defect.encoding.followuptime.expectedlength, defect.encoding.leadtime.availablelength, defect.encoding.leadtime.expectedlength, defect.encoding.telecast.availablelength, defect.encoding.telecast.expectedlength, enddate, formats, formats.cutvideosize, formats.recordformat.id, formats.recordformat.name, formats.recordstate.id, formats.recordstate.name, formats.recordstatemessage, formats.retentiondate, formats.uncutvideosize, isadcutenabled, playlists.id, playlists.name, resumepositions, resumepositions.adfree, resumepositions.default, startdate, tags.key, tags.value, telecast, telecast.characterization, telecast.commentator, telecast.country, telecast.createdate, telecast.description, telecast.director, telecast.enddate, telecast.episode, telecast.guests, telecast.hasmoved, telecast.id, telecast.imageurl100, telecast.imageurl250, telecast.imageurl500, telecast.interpret, telecast.isblackwhite, telecast.ishighlight, telecast.isomitted, telecast.moderator, telecast.originaltitle, telecast.rating, telecast.roles, telecast.roles.rolename, telecast.roles.starid, telecast.roles.starname, telecast.slug, telecast.startdate, telecast.subject, telecast.subtitle, telecast.title, telecast.tvcategory.id, telecast.tvcategory.name, telecast.tvstation.id, telecast.tvstation.isrecordable, telecast.tvstation.largelogourl, telecast.tvstation.name, telecast.tvstation.smalllogourl, telecast.tvsubcategory.id, telecast.tvsubcategory.name, telecast.updatedate, telecast.voluntaryselfregulationofthemovieindustry, telecast.year, telecastid, updatedate"]', $fsk = null, $is_highlight = null, $last_update_date = null, $limit = null, $max_end_date = null, $max_start_date = null, $min_end_date = null, $min_start_date = null, $min_start_time_hour = null, $min_start_time_hour = null, $min_start_time_minute = null, $min_start_time_minute = null, $no_paging_header = null, $offset = null, $q = null, $record_formats = null, $record_states = null, $remove_deleted_telecasts = null, $search_text_scope = null, $sort = null, $star_ids = null, $tags = null, $telecast_ids = null, $time_block = null, $time_blocks = null, $tv_categories = null, $tv_stations = null, $tv_sub_categories = null)
    {

        $resourcePath = '/v3/records';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ad_free_available !== null) {
            $queryParams['adFreeAvailable'] = ObjectSerializer::toQueryValue($ad_free_available);
        }
        // query params
        if (is_array($channels)) {
            $channels = ObjectSerializer::serializeCollection($channels, 'multi', true);
        }
        if ($channels !== null) {
            $queryParams['channels'] = ObjectSerializer::toQueryValue($channels);
        }
        // query params
        if (is_array($day_of_weeks)) {
            $day_of_weeks = ObjectSerializer::serializeCollection($day_of_weeks, 'multi', true);
        }
        if ($day_of_weeks !== null) {
            $queryParams['dayOfWeeks'] = ObjectSerializer::toQueryValue($day_of_weeks);
        }
        // query params
        if (is_array($editorial_telecast_list_ids)) {
            $editorial_telecast_list_ids = ObjectSerializer::serializeCollection($editorial_telecast_list_ids, 'multi', true);
        }
        if ($editorial_telecast_list_ids !== null) {
            $queryParams['editorialTelecastListIds'] = ObjectSerializer::toQueryValue($editorial_telecast_list_ids);
        }
        // query params
        if ($exact_title !== null) {
            $queryParams['exactTitle'] = ObjectSerializer::toQueryValue($exact_title);
        }
        // query params
        if (is_array($exact_titles)) {
            $exact_titles = ObjectSerializer::serializeCollection($exact_titles, 'multi', true);
        }
        if ($exact_titles !== null) {
            $queryParams['exactTitles'] = ObjectSerializer::toQueryValue($exact_titles);
        }
        // query params
        if (is_array($excluded_telecast_ids)) {
            $excluded_telecast_ids = ObjectSerializer::serializeCollection($excluded_telecast_ids, 'multi', true);
        }
        if ($excluded_telecast_ids !== null) {
            $queryParams['excludedTelecastIds'] = ObjectSerializer::toQueryValue($excluded_telecast_ids);
        }
        // query params
        if (is_array($excluded_tv_stations)) {
            $excluded_tv_stations = ObjectSerializer::serializeCollection($excluded_tv_stations, 'multi', true);
        }
        if ($excluded_tv_stations !== null) {
            $queryParams['excludedTvStations'] = ObjectSerializer::toQueryValue($excluded_tv_stations);
        }
        // query params
        if ($exclude_repeated_broadcasts !== null) {
            $queryParams['excludeRepeatedBroadcasts'] = ObjectSerializer::toQueryValue($exclude_repeated_broadcasts);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if (is_array($fsk)) {
            $fsk = ObjectSerializer::serializeCollection($fsk, 'multi', true);
        }
        if ($fsk !== null) {
            $queryParams['fsk'] = ObjectSerializer::toQueryValue($fsk);
        }
        // query params
        if ($is_highlight !== null) {
            $queryParams['isHighlight'] = ObjectSerializer::toQueryValue($is_highlight);
        }
        // query params
        if ($last_update_date !== null) {
            $queryParams['lastUpdateDate'] = ObjectSerializer::toQueryValue($last_update_date);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($max_end_date !== null) {
            $queryParams['maxEndDate'] = ObjectSerializer::toQueryValue($max_end_date);
        }
        // query params
        if ($max_start_date !== null) {
            $queryParams['maxStartDate'] = ObjectSerializer::toQueryValue($max_start_date);
        }
        // query params
        if ($min_end_date !== null) {
            $queryParams['minEndDate'] = ObjectSerializer::toQueryValue($min_end_date);
        }
        // query params
        if ($min_start_date !== null) {
            $queryParams['minStartDate'] = ObjectSerializer::toQueryValue($min_start_date);
        }
        // query params
        if ($min_start_time_hour !== null) {
            $queryParams['minStartTime.hour'] = ObjectSerializer::toQueryValue($min_start_time_hour);
        }
        // query params
        if ($min_start_time_hour !== null) {
            $queryParams['minStartTime.hour'] = ObjectSerializer::toQueryValue($min_start_time_hour);
        }
        // query params
        if ($min_start_time_minute !== null) {
            $queryParams['minStartTime.minute'] = ObjectSerializer::toQueryValue($min_start_time_minute);
        }
        // query params
        if ($min_start_time_minute !== null) {
            $queryParams['minStartTime.minute'] = ObjectSerializer::toQueryValue($min_start_time_minute);
        }
        // query params
        if ($no_paging_header !== null) {
            $queryParams['noPagingHeader'] = ObjectSerializer::toQueryValue($no_paging_header);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if (is_array($record_formats)) {
            $record_formats = ObjectSerializer::serializeCollection($record_formats, 'multi', true);
        }
        if ($record_formats !== null) {
            $queryParams['recordFormats'] = ObjectSerializer::toQueryValue($record_formats);
        }
        // query params
        if (is_array($record_states)) {
            $record_states = ObjectSerializer::serializeCollection($record_states, 'multi', true);
        }
        if ($record_states !== null) {
            $queryParams['recordStates'] = ObjectSerializer::toQueryValue($record_states);
        }
        // query params
        if ($remove_deleted_telecasts !== null) {
            $queryParams['removeDeletedTelecasts'] = ObjectSerializer::toQueryValue($remove_deleted_telecasts);
        }
        // query params
        if ($search_text_scope !== null) {
            $queryParams['searchTextScope'] = ObjectSerializer::toQueryValue($search_text_scope);
        }
        // query params
        if (is_array($sort)) {
            $sort = ObjectSerializer::serializeCollection($sort, 'multi', true);
        }
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if (is_array($star_ids)) {
            $star_ids = ObjectSerializer::serializeCollection($star_ids, 'multi', true);
        }
        if ($star_ids !== null) {
            $queryParams['starIds'] = ObjectSerializer::toQueryValue($star_ids);
        }
        // query params
        if (is_array($tags)) {
            $tags = ObjectSerializer::serializeCollection($tags, 'multi', true);
        }
        if ($tags !== null) {
            $queryParams['tags'] = ObjectSerializer::toQueryValue($tags);
        }
        // query params
        if (is_array($telecast_ids)) {
            $telecast_ids = ObjectSerializer::serializeCollection($telecast_ids, 'multi', true);
        }
        if ($telecast_ids !== null) {
            $queryParams['telecastIds'] = ObjectSerializer::toQueryValue($telecast_ids);
        }
        // query params
        if ($time_block !== null) {
            $queryParams['timeBlock'] = ObjectSerializer::toQueryValue($time_block);
        }
        // query params
        if (is_array($time_blocks)) {
            $time_blocks = ObjectSerializer::serializeCollection($time_blocks, 'multi', true);
        }
        if ($time_blocks !== null) {
            $queryParams['timeBlocks'] = ObjectSerializer::toQueryValue($time_blocks);
        }
        // query params
        if (is_array($tv_categories)) {
            $tv_categories = ObjectSerializer::serializeCollection($tv_categories, 'multi', true);
        }
        if ($tv_categories !== null) {
            $queryParams['tvCategories'] = ObjectSerializer::toQueryValue($tv_categories);
        }
        // query params
        if (is_array($tv_stations)) {
            $tv_stations = ObjectSerializer::serializeCollection($tv_stations, 'multi', true);
        }
        if ($tv_stations !== null) {
            $queryParams['tvStations'] = ObjectSerializer::toQueryValue($tv_stations);
        }
        // query params
        if (is_array($tv_sub_categories)) {
            $tv_sub_categories = ObjectSerializer::serializeCollection($tv_sub_categories, 'multi', true);
        }
        if ($tv_sub_categories !== null) {
            $queryParams['tvSubCategories'] = ObjectSerializer::toQueryValue($tv_sub_categories);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/x.cf-json-base64']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/x.cf-json-base64'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v3RecordsTelecastIdDelete
     *
     * Deletes the record with the given identifier.
     *
     * @param  int $telecast_id The identifier of the telecast. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponseRecordOperation
     */
    public function v3RecordsTelecastIdDelete($telecast_id)
    {
        list($response) = $this->v3RecordsTelecastIdDeleteWithHttpInfo($telecast_id);
        return $response;
    }

    /**
     * Operation v3RecordsTelecastIdDeleteWithHttpInfo
     *
     * Deletes the record with the given identifier.
     *
     * @param  int $telecast_id The identifier of the telecast. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponseRecordOperation, HTTP status code, HTTP response headers (array of strings)
     */
    public function v3RecordsTelecastIdDeleteWithHttpInfo($telecast_id)
    {
        $returnType = '\Swagger\Client\Model\ResponseRecordOperation';
        $request = $this->v3RecordsTelecastIdDeleteRequest($telecast_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseRecordOperation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v3RecordsTelecastIdDeleteAsync
     *
     * Deletes the record with the given identifier.
     *
     * @param  int $telecast_id The identifier of the telecast. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3RecordsTelecastIdDeleteAsync($telecast_id)
    {
        return $this->v3RecordsTelecastIdDeleteAsyncWithHttpInfo($telecast_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3RecordsTelecastIdDeleteAsyncWithHttpInfo
     *
     * Deletes the record with the given identifier.
     *
     * @param  int $telecast_id The identifier of the telecast. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3RecordsTelecastIdDeleteAsyncWithHttpInfo($telecast_id)
    {
        $returnType = '\Swagger\Client\Model\ResponseRecordOperation';
        $request = $this->v3RecordsTelecastIdDeleteRequest($telecast_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3RecordsTelecastIdDelete'
     *
     * @param  int $telecast_id The identifier of the telecast. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3RecordsTelecastIdDeleteRequest($telecast_id)
    {
        // verify the required parameter 'telecast_id' is set
        if ($telecast_id === null || (is_array($telecast_id) && count($telecast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telecast_id when calling v3RecordsTelecastIdDelete'
            );
        }

        $resourcePath = '/v3/records/{telecastId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($telecast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'telecastId' . '}',
                ObjectSerializer::toPathValue($telecast_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/x.cf-json-base64']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/x.cf-json-base64'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v3RecordsTelecastIdNotificationDelete
     *
     * Unsubscribe from a record notification.
     *
     * @param  int $telecast_id The identifier of the telecast. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v3RecordsTelecastIdNotificationDelete($telecast_id)
    {
        $this->v3RecordsTelecastIdNotificationDeleteWithHttpInfo($telecast_id);
    }

    /**
     * Operation v3RecordsTelecastIdNotificationDeleteWithHttpInfo
     *
     * Unsubscribe from a record notification.
     *
     * @param  int $telecast_id The identifier of the telecast. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v3RecordsTelecastIdNotificationDeleteWithHttpInfo($telecast_id)
    {
        $returnType = '';
        $request = $this->v3RecordsTelecastIdNotificationDeleteRequest($telecast_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v3RecordsTelecastIdNotificationDeleteAsync
     *
     * Unsubscribe from a record notification.
     *
     * @param  int $telecast_id The identifier of the telecast. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3RecordsTelecastIdNotificationDeleteAsync($telecast_id)
    {
        return $this->v3RecordsTelecastIdNotificationDeleteAsyncWithHttpInfo($telecast_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3RecordsTelecastIdNotificationDeleteAsyncWithHttpInfo
     *
     * Unsubscribe from a record notification.
     *
     * @param  int $telecast_id The identifier of the telecast. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3RecordsTelecastIdNotificationDeleteAsyncWithHttpInfo($telecast_id)
    {
        $returnType = '';
        $request = $this->v3RecordsTelecastIdNotificationDeleteRequest($telecast_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3RecordsTelecastIdNotificationDelete'
     *
     * @param  int $telecast_id The identifier of the telecast. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3RecordsTelecastIdNotificationDeleteRequest($telecast_id)
    {
        // verify the required parameter 'telecast_id' is set
        if ($telecast_id === null || (is_array($telecast_id) && count($telecast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telecast_id when calling v3RecordsTelecastIdNotificationDelete'
            );
        }

        $resourcePath = '/v3/records/{telecastId}/notification';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($telecast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'telecastId' . '}',
                ObjectSerializer::toPathValue($telecast_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v3RecordsTelecastIdResumeDelete
     *
     * Deletes the current stream position used for later resume.
     *
     * @param  int $telecast_id The record identifier. (required)
     * @param  bool $ad_free ad_free (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v3RecordsTelecastIdResumeDelete($telecast_id, $ad_free = null)
    {
        $this->v3RecordsTelecastIdResumeDeleteWithHttpInfo($telecast_id, $ad_free);
    }

    /**
     * Operation v3RecordsTelecastIdResumeDeleteWithHttpInfo
     *
     * Deletes the current stream position used for later resume.
     *
     * @param  int $telecast_id The record identifier. (required)
     * @param  bool $ad_free (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v3RecordsTelecastIdResumeDeleteWithHttpInfo($telecast_id, $ad_free = null)
    {
        $returnType = '';
        $request = $this->v3RecordsTelecastIdResumeDeleteRequest($telecast_id, $ad_free);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v3RecordsTelecastIdResumeDeleteAsync
     *
     * Deletes the current stream position used for later resume.
     *
     * @param  int $telecast_id The record identifier. (required)
     * @param  bool $ad_free (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3RecordsTelecastIdResumeDeleteAsync($telecast_id, $ad_free = null)
    {
        return $this->v3RecordsTelecastIdResumeDeleteAsyncWithHttpInfo($telecast_id, $ad_free)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3RecordsTelecastIdResumeDeleteAsyncWithHttpInfo
     *
     * Deletes the current stream position used for later resume.
     *
     * @param  int $telecast_id The record identifier. (required)
     * @param  bool $ad_free (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3RecordsTelecastIdResumeDeleteAsyncWithHttpInfo($telecast_id, $ad_free = null)
    {
        $returnType = '';
        $request = $this->v3RecordsTelecastIdResumeDeleteRequest($telecast_id, $ad_free);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3RecordsTelecastIdResumeDelete'
     *
     * @param  int $telecast_id The record identifier. (required)
     * @param  bool $ad_free (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3RecordsTelecastIdResumeDeleteRequest($telecast_id, $ad_free = null)
    {
        // verify the required parameter 'telecast_id' is set
        if ($telecast_id === null || (is_array($telecast_id) && count($telecast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telecast_id when calling v3RecordsTelecastIdResumeDelete'
            );
        }

        $resourcePath = '/v3/records/{telecastId}/resume';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ad_free !== null) {
            $queryParams['adFree'] = ObjectSerializer::toQueryValue($ad_free);
        }

        // path params
        if ($telecast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'telecastId' . '}',
                ObjectSerializer::toPathValue($telecast_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
