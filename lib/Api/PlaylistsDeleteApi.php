<?php
/**
 * PlaylistsDeleteApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API v3
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PlaylistsDeleteApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlaylistsDeleteApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v3PlaylistsDelete
     *
     * Deletes the playlists specified by the identifiers.
     *
     * @param  int[] $playlist_ids A comma separated list of playlist identifiers. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v3PlaylistsDelete($playlist_ids = null)
    {
        $this->v3PlaylistsDeleteWithHttpInfo($playlist_ids);
    }

    /**
     * Operation v3PlaylistsDeleteWithHttpInfo
     *
     * Deletes the playlists specified by the identifiers.
     *
     * @param  int[] $playlist_ids A comma separated list of playlist identifiers. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v3PlaylistsDeleteWithHttpInfo($playlist_ids = null)
    {
        $returnType = '';
        $request = $this->v3PlaylistsDeleteRequest($playlist_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v3PlaylistsDeleteAsync
     *
     * Deletes the playlists specified by the identifiers.
     *
     * @param  int[] $playlist_ids A comma separated list of playlist identifiers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsDeleteAsync($playlist_ids = null)
    {
        return $this->v3PlaylistsDeleteAsyncWithHttpInfo($playlist_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3PlaylistsDeleteAsyncWithHttpInfo
     *
     * Deletes the playlists specified by the identifiers.
     *
     * @param  int[] $playlist_ids A comma separated list of playlist identifiers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsDeleteAsyncWithHttpInfo($playlist_ids = null)
    {
        $returnType = '';
        $request = $this->v3PlaylistsDeleteRequest($playlist_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3PlaylistsDelete'
     *
     * @param  int[] $playlist_ids A comma separated list of playlist identifiers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3PlaylistsDeleteRequest($playlist_ids = null)
    {

        $resourcePath = '/v3/playlists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($playlist_ids)) {
            $playlist_ids = ObjectSerializer::serializeCollection($playlist_ids, 'multi', true);
        }
        if ($playlist_ids !== null) {
            $queryParams['playlistIds'] = ObjectSerializer::toQueryValue($playlist_ids);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v3PlaylistsFollowDelete
     *
     * Removes the playlists from the saved (followed) playlists.
     *
     * @param  int[] $playlist_ids A comma separated list of playlist identifiers. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v3PlaylistsFollowDelete($playlist_ids = null)
    {
        $this->v3PlaylistsFollowDeleteWithHttpInfo($playlist_ids);
    }

    /**
     * Operation v3PlaylistsFollowDeleteWithHttpInfo
     *
     * Removes the playlists from the saved (followed) playlists.
     *
     * @param  int[] $playlist_ids A comma separated list of playlist identifiers. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v3PlaylistsFollowDeleteWithHttpInfo($playlist_ids = null)
    {
        $returnType = '';
        $request = $this->v3PlaylistsFollowDeleteRequest($playlist_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v3PlaylistsFollowDeleteAsync
     *
     * Removes the playlists from the saved (followed) playlists.
     *
     * @param  int[] $playlist_ids A comma separated list of playlist identifiers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsFollowDeleteAsync($playlist_ids = null)
    {
        return $this->v3PlaylistsFollowDeleteAsyncWithHttpInfo($playlist_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3PlaylistsFollowDeleteAsyncWithHttpInfo
     *
     * Removes the playlists from the saved (followed) playlists.
     *
     * @param  int[] $playlist_ids A comma separated list of playlist identifiers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsFollowDeleteAsyncWithHttpInfo($playlist_ids = null)
    {
        $returnType = '';
        $request = $this->v3PlaylistsFollowDeleteRequest($playlist_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3PlaylistsFollowDelete'
     *
     * @param  int[] $playlist_ids A comma separated list of playlist identifiers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3PlaylistsFollowDeleteRequest($playlist_ids = null)
    {

        $resourcePath = '/v3/playlists/follow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($playlist_ids)) {
            $playlist_ids = ObjectSerializer::serializeCollection($playlist_ids, 'multi', true);
        }
        if ($playlist_ids !== null) {
            $queryParams['playlistIds'] = ObjectSerializer::toQueryValue($playlist_ids);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v3PlaylistsPlaylistIdDelete
     *
     * Deletes the playlist specified by the identifier.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v3PlaylistsPlaylistIdDelete($playlist_id)
    {
        $this->v3PlaylistsPlaylistIdDeleteWithHttpInfo($playlist_id);
    }

    /**
     * Operation v3PlaylistsPlaylistIdDeleteWithHttpInfo
     *
     * Deletes the playlist specified by the identifier.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v3PlaylistsPlaylistIdDeleteWithHttpInfo($playlist_id)
    {
        $returnType = '';
        $request = $this->v3PlaylistsPlaylistIdDeleteRequest($playlist_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v3PlaylistsPlaylistIdDeleteAsync
     *
     * Deletes the playlist specified by the identifier.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsPlaylistIdDeleteAsync($playlist_id)
    {
        return $this->v3PlaylistsPlaylistIdDeleteAsyncWithHttpInfo($playlist_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3PlaylistsPlaylistIdDeleteAsyncWithHttpInfo
     *
     * Deletes the playlist specified by the identifier.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsPlaylistIdDeleteAsyncWithHttpInfo($playlist_id)
    {
        $returnType = '';
        $request = $this->v3PlaylistsPlaylistIdDeleteRequest($playlist_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3PlaylistsPlaylistIdDelete'
     *
     * @param  int $playlist_id The playlist identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3PlaylistsPlaylistIdDeleteRequest($playlist_id)
    {
        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null || (is_array($playlist_id) && count($playlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $playlist_id when calling v3PlaylistsPlaylistIdDelete'
            );
        }

        $resourcePath = '/v3/playlists/{playlistId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playlistId' . '}',
                ObjectSerializer::toPathValue($playlist_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v3PlaylistsPlaylistIdFollowDelete
     *
     * Remove the playlist from the saved (followed) playlists.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v3PlaylistsPlaylistIdFollowDelete($playlist_id)
    {
        $this->v3PlaylistsPlaylistIdFollowDeleteWithHttpInfo($playlist_id);
    }

    /**
     * Operation v3PlaylistsPlaylistIdFollowDeleteWithHttpInfo
     *
     * Remove the playlist from the saved (followed) playlists.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v3PlaylistsPlaylistIdFollowDeleteWithHttpInfo($playlist_id)
    {
        $returnType = '';
        $request = $this->v3PlaylistsPlaylistIdFollowDeleteRequest($playlist_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v3PlaylistsPlaylistIdFollowDeleteAsync
     *
     * Remove the playlist from the saved (followed) playlists.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsPlaylistIdFollowDeleteAsync($playlist_id)
    {
        return $this->v3PlaylistsPlaylistIdFollowDeleteAsyncWithHttpInfo($playlist_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3PlaylistsPlaylistIdFollowDeleteAsyncWithHttpInfo
     *
     * Remove the playlist from the saved (followed) playlists.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsPlaylistIdFollowDeleteAsyncWithHttpInfo($playlist_id)
    {
        $returnType = '';
        $request = $this->v3PlaylistsPlaylistIdFollowDeleteRequest($playlist_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3PlaylistsPlaylistIdFollowDelete'
     *
     * @param  int $playlist_id The playlist identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3PlaylistsPlaylistIdFollowDeleteRequest($playlist_id)
    {
        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null || (is_array($playlist_id) && count($playlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $playlist_id when calling v3PlaylistsPlaylistIdFollowDelete'
            );
        }

        $resourcePath = '/v3/playlists/{playlistId}/follow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playlistId' . '}',
                ObjectSerializer::toPathValue($playlist_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v3PlaylistsPlaylistIdItemsDelete
     *
     * Deletes the given telecasts from the playlist.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  int[] $telecast_ids A comma separated list of telecast identifiers. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponsePlaylistItemOperation[]
     */
    public function v3PlaylistsPlaylistIdItemsDelete($playlist_id, $telecast_ids = null)
    {
        list($response) = $this->v3PlaylistsPlaylistIdItemsDeleteWithHttpInfo($playlist_id, $telecast_ids);
        return $response;
    }

    /**
     * Operation v3PlaylistsPlaylistIdItemsDeleteWithHttpInfo
     *
     * Deletes the given telecasts from the playlist.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  int[] $telecast_ids A comma separated list of telecast identifiers. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponsePlaylistItemOperation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v3PlaylistsPlaylistIdItemsDeleteWithHttpInfo($playlist_id, $telecast_ids = null)
    {
        $returnType = '\Swagger\Client\Model\ResponsePlaylistItemOperation[]';
        $request = $this->v3PlaylistsPlaylistIdItemsDeleteRequest($playlist_id, $telecast_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponsePlaylistItemOperation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v3PlaylistsPlaylistIdItemsDeleteAsync
     *
     * Deletes the given telecasts from the playlist.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  int[] $telecast_ids A comma separated list of telecast identifiers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsPlaylistIdItemsDeleteAsync($playlist_id, $telecast_ids = null)
    {
        return $this->v3PlaylistsPlaylistIdItemsDeleteAsyncWithHttpInfo($playlist_id, $telecast_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3PlaylistsPlaylistIdItemsDeleteAsyncWithHttpInfo
     *
     * Deletes the given telecasts from the playlist.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  int[] $telecast_ids A comma separated list of telecast identifiers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsPlaylistIdItemsDeleteAsyncWithHttpInfo($playlist_id, $telecast_ids = null)
    {
        $returnType = '\Swagger\Client\Model\ResponsePlaylistItemOperation[]';
        $request = $this->v3PlaylistsPlaylistIdItemsDeleteRequest($playlist_id, $telecast_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3PlaylistsPlaylistIdItemsDelete'
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  int[] $telecast_ids A comma separated list of telecast identifiers. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3PlaylistsPlaylistIdItemsDeleteRequest($playlist_id, $telecast_ids = null)
    {
        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null || (is_array($playlist_id) && count($playlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $playlist_id when calling v3PlaylistsPlaylistIdItemsDelete'
            );
        }

        $resourcePath = '/v3/playlists/{playlistId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($telecast_ids)) {
            $telecast_ids = ObjectSerializer::serializeCollection($telecast_ids, 'multi', true);
        }
        if ($telecast_ids !== null) {
            $queryParams['telecastIds'] = ObjectSerializer::toQueryValue($telecast_ids);
        }

        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playlistId' . '}',
                ObjectSerializer::toPathValue($playlist_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/x.cf-json-base64']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/x.cf-json-base64'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v3PlaylistsPlaylistIdItemsTelecastIdDelete
     *
     * Deletes the given telecast from the playlist.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  int $telecast_id The telecast identifier. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResponsePlaylistItemOperation
     */
    public function v3PlaylistsPlaylistIdItemsTelecastIdDelete($playlist_id, $telecast_id)
    {
        list($response) = $this->v3PlaylistsPlaylistIdItemsTelecastIdDeleteWithHttpInfo($playlist_id, $telecast_id);
        return $response;
    }

    /**
     * Operation v3PlaylistsPlaylistIdItemsTelecastIdDeleteWithHttpInfo
     *
     * Deletes the given telecast from the playlist.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  int $telecast_id The telecast identifier. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResponsePlaylistItemOperation, HTTP status code, HTTP response headers (array of strings)
     */
    public function v3PlaylistsPlaylistIdItemsTelecastIdDeleteWithHttpInfo($playlist_id, $telecast_id)
    {
        $returnType = '\Swagger\Client\Model\ResponsePlaylistItemOperation';
        $request = $this->v3PlaylistsPlaylistIdItemsTelecastIdDeleteRequest($playlist_id, $telecast_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponsePlaylistItemOperation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v3PlaylistsPlaylistIdItemsTelecastIdDeleteAsync
     *
     * Deletes the given telecast from the playlist.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  int $telecast_id The telecast identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsPlaylistIdItemsTelecastIdDeleteAsync($playlist_id, $telecast_id)
    {
        return $this->v3PlaylistsPlaylistIdItemsTelecastIdDeleteAsyncWithHttpInfo($playlist_id, $telecast_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v3PlaylistsPlaylistIdItemsTelecastIdDeleteAsyncWithHttpInfo
     *
     * Deletes the given telecast from the playlist.
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  int $telecast_id The telecast identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v3PlaylistsPlaylistIdItemsTelecastIdDeleteAsyncWithHttpInfo($playlist_id, $telecast_id)
    {
        $returnType = '\Swagger\Client\Model\ResponsePlaylistItemOperation';
        $request = $this->v3PlaylistsPlaylistIdItemsTelecastIdDeleteRequest($playlist_id, $telecast_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3PlaylistsPlaylistIdItemsTelecastIdDelete'
     *
     * @param  int $playlist_id The playlist identifier. (required)
     * @param  int $telecast_id The telecast identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v3PlaylistsPlaylistIdItemsTelecastIdDeleteRequest($playlist_id, $telecast_id)
    {
        // verify the required parameter 'playlist_id' is set
        if ($playlist_id === null || (is_array($playlist_id) && count($playlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $playlist_id when calling v3PlaylistsPlaylistIdItemsTelecastIdDelete'
            );
        }
        // verify the required parameter 'telecast_id' is set
        if ($telecast_id === null || (is_array($telecast_id) && count($telecast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telecast_id when calling v3PlaylistsPlaylistIdItemsTelecastIdDelete'
            );
        }

        $resourcePath = '/v3/playlists/{playlistId}/items/{telecastId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($playlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playlistId' . '}',
                ObjectSerializer::toPathValue($playlist_id),
                $resourcePath
            );
        }
        // path params
        if ($telecast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'telecastId' . '}',
                ObjectSerializer::toPathValue($telecast_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/x.cf-json-base64']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/x.cf-json-base64'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
